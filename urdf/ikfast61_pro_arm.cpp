/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-01-22 01:15:05.394459
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91;
x0=IKcos(j[0]);
x1=IKsin(j[4]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[3]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.999990711893641)*x1);
x13=((0.999990711893641)*x9);
x14=((0.99999999995)*x8);
x15=((0.000362036891538667)*x9);
x16=((0.00431000306829228)*x9);
x17=((0.000362036891538667)*x1);
x18=((0.99999999995)*x6);
x19=((0.0839984387864853)*x9);
x20=((1.0)*x8);
x21=((9.9999999995e-6)*x8);
x22=((0.000362226891538667)*x3);
x23=((0.167)*x3);
x24=((1.0)*x3);
x25=((1.5612135146668e-6)*x3);
x26=((6.6e-7)*x2);
x27=((0.00431000306829228)*x1);
x28=((0.000362226891520556)*x8);
x29=((0.0839984387864853)*x1);
x30=((1.0)*x6);
x31=(x7*x8);
x32=(x0*x5);
x33=(x2*x3);
x34=(x0*x4);
x35=((-0.99999999995)*x8);
x36=(x2*x5);
x37=((-0.999990711893641)*x1);
x38=((-0.00431000306829228)*x9);
x39=(x0*x6);
x40=(x0*x8);
x41=(x4*x7);
x42=((-0.00431000306829228)*x1);
x43=(x4*x5);
x44=(x6*x7);
x45=((-0.999990711893641)*x9);
x46=(x3*x4);
x47=(x21*x7);
x48=(x18*x7);
x49=(x0*x21);
x50=(x0*x18);
x51=((9.9999999995e-6)*x36);
x52=((9.9999999995e-6)*x46);
x53=((((-0.99999999995)*x46))+(((0.99999999995)*x36)));
x54=(x51+(((-1.0)*x52)));
x55=(x52+(((-1.0)*x51)));
x56=(((x0*x14))+(((9.9999999995e-6)*x39)));
x57=((((-1.0)*x43))+(((-1.0)*x2*x24)));
x58=(x55*x8);
x59=(x54*x6);
x60=(x53*x8);
x61=(x53*x6);
x62=(((x2*x32))+(((-1.0)*x24*x34)));
x63=(((x32*x4))+((x0*x33)));
x64=(((x41*x5))+((x33*x7)));
x65=((((-1.0)*x24*x41))+((x36*x7)));
x66=(x57*x9);
x67=((((-1.0)*x0*x2*x24))+(((-1.0)*x32*x4)));
x68=((((-1.0)*x2*x24*x7))+(((-1.0)*x41*x5)));
x69=(x6*x63);
x70=(x6*x64);
x71=(x1*x62);
x72=((9.9999999995e-6)*x69);
x73=((9.9999999995e-6)*x70);
x74=(x67*x8);
x75=(x68*x8);
x76=(x14*x67);
x77=(x14*x68);
x78=(x72+x47);
x79=(x73+x50);
x80=(x76+x48);
x81=(x59+x60);
x82=(x77+x49);
x83=((((-1.0)*x20*x53))+(((-1.0)*x30*x54)));
x84=(((x18*x64))+((x21*x68)));
x85=((((9.9999999995e-6)*x44))+((x18*x63))+((x14*x7))+((x21*x67)));
x86=((((-9.9999999995e-6)*x31))+(((-9.9999999995e-6)*x69))+x80);
x87=(((x35*x67))+x78+(((-0.99999999995)*x44)));
x88=(((x35*x68))+(((-9.9999999995e-6)*x40))+x79);
x89=((((-0.99999999995)*x39))+x82+(((-9.9999999995e-6)*x70)));
x90=(((x12*x65))+((x13*x88))+((x16*x65))+((x27*x89)));
x91=(((x38*x62))+((x42*x86))+((x37*x62))+((x45*x87)));
eerot[0]=(((x10*x91))+(((-1.0)*x11*x85)));
eerot[1]=(((x10*x85))+((x11*x91)));
eerot[2]=(((x13*x62))+((x12*x86))+(((-1.0)*x27*x62))+(((-1.0)*x16*((x78+(((-1.0)*x80)))))));
IkReal x92=(x2*x32);
eetrans[0]=(((x1*((((x22*x34))+(((-0.000362226891538667)*x92))))))+((x23*x34))+(((-1.0)*x0*x26))+((x15*x87))+((x17*x62))+((x9*(((((-1.5612135146668e-6)*x92))+((x25*x34))))))+((x9*(((((-3.62226891520556e-9)*x31))+(((-3.62226891520556e-9)*x69))+(((0.000362226891520556)*x44))+((x28*x67))))))+(((4.4e-7)*x0*x33))+(((-0.167)*x92))+(((-1.0)*x19*x62))+(((0.247)*x34))+(((-1.0)*x29*((x80+(((-1.0)*x78))))))+((x1*(((((1.56121351458874e-11)*x31))+(((-1.56121351458874e-6)*x44))+(((-1.56121351458874e-6)*x74))+(((1.56121351458874e-11)*x69))))))+(((4.4e-7)*x32*x4)));
eerot[3]=(((x10*x90))+((x11*((x84+(((-1.0)*x56)))))));
eerot[4]=(((x10*((x56+(((-1.0)*x84))))))+((x11*x90)));
eerot[5]=((((-1.0)*x12*((x82+(((-1.0)*x79))))))+((x27*x65))+((x16*x88))+(((-1.0)*x13*x65)));
IkReal x93=(x36*x7);
IkReal x94=((1.0)*x41);
eetrans[1]=((((-1.0)*x15*x88))+((x29*x89))+((x1*(((((0.000362226891538667)*x93))+(((-1.0)*x22*x94))))))+((x19*x65))+(((-4.4e-7)*x33*x7))+(((-0.247)*x41))+(((-1.0)*x23*x94))+(((-4.4e-7)*x41*x5))+(((0.167)*x93))+((x9*(((((-3.62226891520556e-9)*x40))+(((-1.0)*x28*x68))+(((0.000362226891520556)*x39))+(((3.62226891520556e-9)*x70))))))+((x9*(((((-1.0)*x25*x94))+(((1.5612135146668e-6)*x93))))))+((x1*(((((1.56121351458874e-11)*x40))+(((-1.56121351458874e-11)*x70))+(((-1.56121351458874e-6)*x39))+(((1.56121351458874e-6)*x75))))))+(((-1.0)*x17*x65))+((x26*x7)));
eerot[6]=(((x10*((((x38*x57))+((x37*x57))+((x42*(((((-1.0)*x59))+(((-1.0)*x60))))))+((x45*x81))))))+((x11*(((((-1.0)*x20*x55))+(((-1.0)*x30*x53)))))));
IkReal x95=((1.0)*x57);
eerot[7]=(((x10*((x58+x61))))+((x11*(((((-1.0)*x13*x81))+(((-1.0)*x27*x83))+(((-1.0)*x16*x95))+(((-1.0)*x12*x95)))))));
eerot[8]=(((x13*x57))+((x12*x83))+(((-1.0)*x27*x57))+(((-1.0)*x16*x81)));
eetrans[2]=((0.216)+(((-4.4e-7)*x46))+(((0.167)*x43))+(((6.6e-7)*x4))+((x17*x57))+((x15*x81))+((x9*(((((-0.000362226891538667)*x59))+(((-0.000362226891538667)*x60))))))+((x1*(((((1.5612135146668e-6)*x60))+(((1.5612135146668e-6)*x59))))))+(((-1.0)*x29*x83))+((x2*x23))+(((-1.0)*x19*x57))+(((0.247)*x2))+((x9*(((((1.5612135146668e-6)*x43))+((x2*x25))))))+((x1*(((((0.000362226891538667)*x43))+((x2*x22))))))+(((4.4e-7)*x36)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-0.0839992189801653)*r02))+(((-1.0)*px)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((0.0839992189801653)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((0.216)+(((-0.0839992189801653)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x96=((1.0)*px);
IkReal x97=((1.0)*pz);
IkReal x98=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x98))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x97)));
rxp0_2=((((-1.0)*r10*x96))+((py*r00)));
rxp1_0=((((-1.0)*r21*x98))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x97)));
rxp1_2=((((-1.0)*r11*x96))+((py*r01)));
rxp2_0=((((-1.0)*r22*x98))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x97)));
rxp2_2=((((-1.0)*r12*x96))+((py*r02)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x99=py*py;
IkReal x100=r11*r11;
IkReal x101=px*px;
IkReal x102=r01*r01;
IkReal x103=pz*pz;
IkReal x104=r00*r00;
IkReal x105=r20*r20;
IkReal x106=r10*r10;
IkReal x107=r21*r21;
IkReal x108=r12*r12;
IkReal x109=r22*r22;
IkReal x110=r02*r02;
IkReal x111=((12.1215059758171)*x106);
IkReal x112=((12.1215059758171)*x109);
IkReal x113=((12.1215059758171)*x99);
IkReal x114=(x101*x104);
IkReal x115=(x101*x110);
IkReal x116=(x103*x105);
IkReal x117=(x100*x102);
IkReal x118=((12.1215059758171)*x103*x107);
IkReal x119=((12.1215059758171)*x101*x102);
if( (((-1.07757763824582)+((x100*x113))+((x100*x118))+(((-1.0)*x112*x115))+((x111*x116))+((x111*x114))+(((-1.0)*x108*x112*x99))+(((-1.0)*x103*x108*x112))+((x104*x111*x99))+(((12.1215059758171)*x105*x114))+((x100*x107*x113))+((x113*x117))+((x102*x118))+((x103*x112))+(((-24.2430119516342)*x107*x116))+x119+x118+(((-1.0)*x103*x110*x112))+(((-24.2430119516342)*x102*x114))+(((-1.0)*x108*x110*x113))+((x108*x113))+(((-24.2430119516342)*x100*x106*x99))+(((-12.1215059758171)*x108*x115))+((x111*x99))+((x105*x111*x99))+(((12.1215059758171)*x101*x117))+(((12.1215059758171)*x116))+(((12.1215059758171)*x115))+(((12.1215059758171)*x114))+(((12.1215059758171)*x104*x116))+((x107*x119)))) < -1-IKFAST_SINCOS_THRESH || (((-1.07757763824582)+((x100*x113))+((x100*x118))+(((-1.0)*x112*x115))+((x111*x116))+((x111*x114))+(((-1.0)*x108*x112*x99))+(((-1.0)*x103*x108*x112))+((x104*x111*x99))+(((12.1215059758171)*x105*x114))+((x100*x107*x113))+((x113*x117))+((x102*x118))+((x103*x112))+(((-24.2430119516342)*x107*x116))+x119+x118+(((-1.0)*x103*x110*x112))+(((-24.2430119516342)*x102*x114))+(((-1.0)*x108*x110*x113))+((x108*x113))+(((-24.2430119516342)*x100*x106*x99))+(((-12.1215059758171)*x108*x115))+((x111*x99))+((x105*x111*x99))+(((12.1215059758171)*x101*x117))+(((12.1215059758171)*x116))+(((12.1215059758171)*x115))+(((12.1215059758171)*x114))+(((12.1215059758171)*x104*x116))+((x107*x119)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x120=IKasin(((-1.07757763824582)+((x100*x113))+((x100*x118))+(((-1.0)*x112*x115))+((x111*x116))+((x111*x114))+(((-1.0)*x108*x112*x99))+(((-1.0)*x103*x108*x112))+((x104*x111*x99))+(((12.1215059758171)*x105*x114))+((x100*x107*x113))+((x113*x117))+((x102*x118))+((x103*x112))+(((-24.2430119516342)*x107*x116))+x119+x118+(((-1.0)*x103*x110*x112))+(((-24.2430119516342)*x102*x114))+(((-1.0)*x108*x110*x113))+((x108*x113))+(((-24.2430119516342)*x100*x106*x99))+(((-12.1215059758171)*x108*x115))+((x111*x99))+((x105*x111*x99))+(((12.1215059758171)*x101*x117))+(((12.1215059758171)*x116))+(((12.1215059758171)*x115))+(((12.1215059758171)*x114))+(((12.1215059758171)*x104*x116))+((x107*x119))));
j2array[0]=((1.57080163359021)+(((-1.0)*x120)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((4.71239428718001)+x120);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((139353.586113375)+(((188437.642757924)*cj2))+sj2+(((63702.6039291768)*(sj2*sj2)))+(((63702.6039291768)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x121=((6.6e-7)+(((-4.4e-7)*cj2))+(((0.167)*sj2)));
IkReal x122=((0.247)+(((0.167)*cj2))+(((4.4e-7)*sj2)));
CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(x122),IkReal(x121),IKFAST_ATAN2_MAGTHRESH);
if(!x125.valid){
continue;
}
IkReal x123=((1.0)*(x125.value));
if((((x122*x122)+(x121*x121))) < -0.00001)
continue;
CheckValue<IkReal> x126=IKPowWithIntegerCheck(IKabs(IKsqrt(((x122*x122)+(x121*x121)))),-1);
if(!x126.valid){
continue;
}
if( ((pz*(x126.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x126.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x124=IKasin((pz*(x126.value)));
j1array[0]=((((-1.0)*x123))+(((-1.0)*x124)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x123))+x124);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x127=((8350000.0)*sj2);
IkReal x128=((22.0)*cj2);
IkReal x129=((50000000.0)*pz*sj1);
IkReal x130=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x130;
j0eval[1]=IKsign(x130);
j0eval[2]=((IKabs(((((-1.0)*py*x128))+((py*x127))+((py*x129))+(((33.0)*py)))))+(IKabs(((((-1.0)*px*x128))+((px*x129))+((px*x127))+(((33.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x131=((11.0)*sj2);
IkReal x132=((4175000.0)*cj2);
IkReal x133=((25000000.0)*cj1*pz);
IkReal x134=(((pp*sj1))+(((-1.0)*sj1*(pz*pz))));
j0eval[0]=x134;
j0eval[1]=IKsign(x134);
j0eval[2]=((IKabs(((((-1.0)*py*x133))+(((-1.0)*py*x132))+(((-1.0)*py*x131))+(((-6175000.0)*py)))))+(IKabs(((((-1.0)*px*x131))+(((-1.0)*px*x132))+(((-1.0)*px*x133))+(((-6175000.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x135=(cj1*px);
IkReal x136=(py*sj2);
IkReal x137=((22.0)*sj1);
IkReal x138=((22.0)*cj2);
IkReal x139=(cj1*py);
IkReal x140=(px*sj1);
IkReal x141=((8350000.0)*cj2);
IkReal x142=(py*sj1);
IkReal x143=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x143;
j0eval[1]=((IKabs((((x138*x139))+(((12350000.0)*x142))+(((-8350000.0)*cj1*x136))+((x136*x137))+((x141*x142))+(((-33.0)*x139)))))+(IKabs((((x140*x141))+((x135*x138))+(((12350000.0)*x140))+(((-8350000.0)*sj2*x135))+(((-33.0)*x135))+((px*sj2*x137))))));
j0eval[2]=IKsign(x143);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x144=((275000000.0)*pz);
IkReal x145=((17430625000121.0)*sj2);
IkReal x146=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x146;
j0eval[1]=((IKabs(((((-136812500.0)*px))+(((-1.0)*px*x145))+(((-1.0)*px*x144)))))+(IKabs(((((-136812500.0)*py))+(((-1.0)*py*x144))+(((-1.0)*py*x145))))));
j0eval[2]=IKsign(x146);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x147=((0.167000000001159)*sj2);
IkReal x148=((2.63473053892216e-6)*pz);
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((((-1.0)*py*x147))+(((-1.0)*py*x148))+(((-1.31077844311377e-6)*py)))),IkReal(((((-1.0)*px*x148))+(((-1.0)*px*x147))+(((-1.31077844311377e-6)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x150.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x149.value)+(((1.5707963267949)*(x150.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x151=IKsin(j0);
IkReal x152=IKcos(j0);
evalcond[0]=((((-1.0)*px*x151))+((py*x152)));
evalcond[1]=((-1.31077844311377e-6)+(((-2.63473053892216e-6)*pz))+((px*x152))+(((-0.167000000001159)*sj2))+((py*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x923=((275000000.0)*pz);
IkReal x924=((17430625000121.0)*sj2);
IkReal x925=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x925;
j0eval[1]=((IKabs(((((-136812500.0)*px))+(((-1.0)*px*x924))+((px*x923)))))+(IKabs(((((-136812500.0)*py))+((py*x923))+(((-1.0)*py*x924))))));
j0eval[2]=IKsign(x925);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x926=((0.167000000001159)*sj2);
IkReal x927=((2.63473053892216e-6)*pz);
CheckValue<IkReal> x928=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x928.valid){
continue;
}
CheckValue<IkReal> x929 = IKatan2WithCheck(IkReal((((py*x927))+(((-1.0)*py*x926))+(((-1.31077844311377e-6)*py)))),IkReal(((((-1.0)*px*x926))+((px*x927))+(((-1.31077844311377e-6)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x929.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x928.value)))+(x929.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x930=IKcos(j0);
IkReal x931=IKsin(j0);
IkReal x932=((1.0)*px);
evalcond[0]=((((-1.0)*x931*x932))+((py*x930)));
evalcond[1]=((-1.31077844311377e-6)+(((2.63473053892216e-6)*pz))+(((-1.0)*x930*x932))+(((-1.0)*py*x931))+(((-0.167000000001159)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x933=((104375000000000.0)*pz);
IkReal x934=((17430625000121.0)*sj2);
IkReal x935=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x935;
j0eval[1]=((IKabs(((((-136812500.0)*px))+(((-1.0)*px*x933))+(((-1.0)*px*x934)))))+(IKabs(((((-136812500.0)*py))+(((-1.0)*py*x933))+(((-1.0)*py*x934))))));
j0eval[2]=IKsign(x935);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x936=((379545.454545455)*pz);
IkReal x937=((63384.0909095309)*sj2);
CheckValue<IkReal> x938=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(((((-1.0)*py*x937))+(((-1.0)*py*x936))+(((-0.4975)*py)))),IkReal(((((-1.0)*px*x936))+(((-1.0)*px*x937))+(((-0.4975)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x938.value)))+(x939.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x940=IKcos(j0);
IkReal x941=IKsin(j0);
IkReal x942=((1.0)*px);
evalcond[0]=((((-1.0)*x941*x942))+((py*x940)));
evalcond[1]=((-0.4975)+(((-63384.0909095309)*sj2))+(((-1.0)*py*x941))+(((-1.0)*x940*x942))+(((-379545.454545455)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x943=((104375000000000.0)*pz);
IkReal x944=((17430625000121.0)*sj2);
IkReal x945=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x945;
j0eval[1]=((IKabs(((((-136812500.0)*px))+((px*x943))+(((-1.0)*px*x944)))))+(IKabs(((((-1.0)*py*x944))+(((-136812500.0)*py))+((py*x943))))));
j0eval[2]=IKsign(x945);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x946=((379545.454545455)*pz);
IkReal x947=((63384.0909095309)*sj2);
CheckValue<IkReal> x948=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x948.valid){
continue;
}
CheckValue<IkReal> x949 = IKatan2WithCheck(IkReal(((((-1.0)*py*x947))+(((-0.4975)*py))+((py*x946)))),IkReal((((px*x946))+(((-1.0)*px*x947))+(((-0.4975)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x949.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x948.value)))+(x949.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x950=IKsin(j0);
IkReal x951=IKcos(j0);
evalcond[0]=((((-1.0)*px*x950))+((py*x951)));
evalcond[1]=((-0.4975)+((px*x951))+(((-63384.0909095309)*sj2))+((py*x950))+(((379545.454545455)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x952=(cj1*px);
IkReal x953=((0.167)*sj2);
IkReal x954=(py*sj1);
IkReal x955=((0.167)*cj2);
IkReal x956=((4.4e-7)*sj2);
IkReal x957=((4.4e-7)*cj2);
IkReal x958=(px*sj1);
IkReal x959=(cj1*py);
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(((((-6.6e-7)*x959))+(((-1.0)*x953*x959))+((x957*x959))+(((0.247)*x954))+((x954*x956))+((x954*x955)))),IkReal(((((-6.6e-7)*x952))+((x955*x958))+((x952*x957))+((x956*x958))+(((0.247)*x958))+(((-1.0)*x952*x953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x960.value)))+(x961.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x962=IKcos(j0);
IkReal x963=IKsin(j0);
IkReal x964=((4.4e-7)*cj2);
IkReal x965=((0.167)*sj2);
IkReal x966=((0.167)*cj2);
IkReal x967=((1.0)*sj1);
IkReal x968=((4.4e-7)*sj2);
IkReal x969=(py*x963);
IkReal x970=(px*x962);
evalcond[0]=((((-1.0)*px*x963))+((py*x962)));
evalcond[1]=((-6.6e-7)+(((-1.0)*pz*x967))+((cj1*x970))+((cj1*x969))+x964+(((-1.0)*x965)));
evalcond[2]=((-0.247)+(((-1.0)*x967*x969))+(((-1.0)*cj1*pz))+(((-1.0)*x967*x970))+(((-1.0)*x966))+(((-1.0)*x968)));
evalcond[3]=((((-1.0)*cj1*x965))+(((0.247)*sj1))+((cj1*x964))+((sj1*x966))+((sj1*x968))+(((-6.6e-7)*cj1))+x970+x969);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x971=((4.4e-7)*sj2);
IkReal x972=((0.167)*cj2);
IkReal x973=((1.0)*cj1*pz);
CheckValue<IkReal> x974 = IKatan2WithCheck(IkReal(((((-0.247)*py))+(((-1.0)*py*x973))+(((-1.0)*py*x971))+(((-1.0)*py*x972)))),IkReal(((((-1.0)*px*x972))+(((-1.0)*px*x971))+(((-1.0)*px*x973))+(((-0.247)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975=IKPowWithIntegerCheck(IKsign((((pp*sj1))+(((-1.0)*sj1*(pz*pz))))),-1);
if(!x975.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x974.value)+(((1.5707963267949)*(x975.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x976=IKcos(j0);
IkReal x977=IKsin(j0);
IkReal x978=((4.4e-7)*cj2);
IkReal x979=((0.167)*sj2);
IkReal x980=((0.167)*cj2);
IkReal x981=((1.0)*sj1);
IkReal x982=((4.4e-7)*sj2);
IkReal x983=(py*x977);
IkReal x984=(px*x976);
evalcond[0]=((((-1.0)*px*x977))+((py*x976)));
evalcond[1]=((-6.6e-7)+((cj1*x984))+((cj1*x983))+(((-1.0)*pz*x981))+x978+(((-1.0)*x979)));
evalcond[2]=((-0.247)+(((-1.0)*x982))+(((-1.0)*x980))+(((-1.0)*cj1*pz))+(((-1.0)*x981*x984))+(((-1.0)*x981*x983)));
evalcond[3]=((((-1.0)*cj1*x979))+(((0.247)*sj1))+((cj1*x978))+((sj1*x982))+((sj1*x980))+(((-6.6e-7)*cj1))+x984+x983);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x985=(pz*sj1);
IkReal x986=((0.167)*sj2);
IkReal x987=((4.4e-7)*cj2);
CheckValue<IkReal> x988=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal(((((-1.0)*py*x987))+(((6.6e-7)*py))+((py*x986))+((py*x985)))),IkReal(((((-1.0)*px*x987))+(((6.6e-7)*px))+((px*x986))+((px*x985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x988.value)))+(x989.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x990=IKcos(j0);
IkReal x991=IKsin(j0);
IkReal x992=((4.4e-7)*cj2);
IkReal x993=((0.167)*sj2);
IkReal x994=((0.167)*cj2);
IkReal x995=((1.0)*sj1);
IkReal x996=((4.4e-7)*sj2);
IkReal x997=(py*x991);
IkReal x998=(px*x990);
evalcond[0]=(((py*x990))+(((-1.0)*px*x991)));
evalcond[1]=((-6.6e-7)+((cj1*x997))+((cj1*x998))+(((-1.0)*pz*x995))+(((-1.0)*x993))+x992);
evalcond[2]=((-0.247)+(((-1.0)*x995*x998))+(((-1.0)*x995*x997))+(((-1.0)*cj1*pz))+(((-1.0)*x994))+(((-1.0)*x996)));
evalcond[3]=(((cj1*x992))+(((0.247)*sj1))+(((-6.6e-7)*cj1))+x997+x998+((sj1*x994))+((sj1*x996))+(((-1.0)*cj1*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1000 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1000.valid){
continue;
}
IkReal x999=x1000.value;
j0array[0]=((-1.0)*x999);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x999)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x1001=cj2*cj2;
IkReal x1002=(cj2*sj2);
IkReal x1003=(cj0*px);
IkReal x1004=((0.167)*cj2);
IkReal x1005=(py*sj0);
IkReal x1006=((4.4e-7)*sj2);
IkReal x1007=(pz*sj2);
IkReal x1008=((379545.454545455)*cj2);
IkReal x1009=((1.0)*pz);
IkReal x1010=(cj2*pz);
j1eval[0]=(x1010+((sj2*x1003))+((sj2*x1005))+((x1005*x1008))+(((-1.5)*pz))+(((561363.636363636)*x1003))+(((561363.636363636)*x1005))+(((-379545.454545455)*x1007))+((x1003*x1008)));
j1eval[1]=((IKabs(((-0.0610090000001936)+(((-0.0278889999998064)*x1001))+(((-1.4696e-7)*x1002))+(((-2.1736e-7)*sj2))+(((-0.082498)*cj2))+(pz*pz))))+(IKabs(((2.365e-7)+(((1.54e-9)*cj2))+(((-1.4696e-7)*x1001))+(((-1.0)*x1005*x1009))+(((0.0278889999998064)*x1002))+(((-1.0)*x1003*x1009))+(((0.0412490000002904)*sj2))))));
j1eval[2]=IKsign(((((0.247)*x1003))+(((0.247)*x1005))+(((-6.6e-7)*pz))+((x1004*x1005))+(((-0.167)*x1007))+((x1005*x1006))+(((4.4e-7)*x1010))+((x1003*x1006))+((x1003*x1004))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x1011=cj2*cj2;
IkReal x1012=(cj2*sj2);
IkReal x1013=(cj0*px);
IkReal x1014=((379545.454545455)*sj2);
IkReal x1015=(py*sj0);
IkReal x1016=((1.0)*cj2);
IkReal x1017=((0.167)*sj2);
IkReal x1018=(pz*sj2);
IkReal x1019=((1.0)*pz);
IkReal x1020=(cj2*pz);
IkReal x1021=((4.4e-7)*cj2);
j1eval[0]=(((x1014*x1015))+(((1.5)*x1013))+(((1.5)*x1015))+x1018+(((-1.0)*x1015*x1016))+((x1013*x1014))+(((561363.636363636)*pz))+(((379545.454545455)*x1020))+(((-1.0)*x1013*x1016)));
j1eval[1]=IKsign((((x1013*x1017))+(((0.167)*x1020))+(((-1.0)*x1015*x1021))+((x1015*x1017))+(((6.6e-7)*x1013))+(((6.6e-7)*x1015))+(((-1.0)*x1013*x1021))+(((0.247)*pz))+(((4.4e-7)*x1018))));
j1eval[2]=((IKabs(((0.0278890000004356)+(((-0.0278889999998064)*x1011))+(((-5.808e-13)*cj2))+(((-1.0)*pz*x1019))+(((-1.4696e-7)*x1012))+(((2.2044e-7)*sj2)))))+(IKabs(((-2.365e-7)+(((-1.54e-9)*cj2))+(((-0.0278889999998064)*x1012))+(((-1.0)*x1015*x1019))+(((-1.0)*x1013*x1019))+(((-0.0412490000002904)*sj2))+(((1.4696e-7)*x1011))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1022=(cj2*pz);
IkReal x1023=(cj0*px);
IkReal x1024=((0.167)*cj2);
IkReal x1025=(py*sj0);
IkReal x1026=(pz*sj2);
IkReal x1027=((379545.454545455)*cj2);
IkReal x1028=((4.4e-7)*sj2);
j1eval[0]=((((-379545.454545455)*x1026))+x1022+(((561363.636363636)*x1023))+(((561363.636363636)*x1025))+((x1023*x1027))+((x1025*x1027))+(((-1.5)*pz))+((sj2*x1025))+((sj2*x1023)));
j1eval[1]=IKsign(((((-0.167)*x1026))+(((-6.6e-7)*pz))+((x1023*x1028))+((x1023*x1024))+(((4.4e-7)*x1022))+((x1025*x1028))+((x1024*x1025))+(((0.247)*x1025))+(((0.247)*x1023))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1029=py*py;
IkReal x1030=cj0*cj0;
IkReal x1031=cj2*cj2;
IkReal x1032=(cj2*sj2);
IkReal x1033=((0.167)*cj2);
IkReal x1034=(cj0*px);
IkReal x1035=(py*sj0);
IkReal x1036=((4.4e-7)*sj2);
IkReal x1037=((1.0)*pz);
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(IKsign(((((0.247)*x1034))+(((0.247)*x1035))+(((-0.167)*pz*sj2))+(((-6.6e-7)*pz))+(((4.4e-7)*cj2*pz))+((x1034*x1036))+((x1035*x1036))+((x1033*x1035))+((x1033*x1034)))),-1);
if(!x1038.valid){
continue;
}
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(((0.0278890000004356)+(((-2.0)*x1034*x1035))+(((-0.0278889999998064)*x1031))+(((-1.0)*x1029))+(((-5.808e-13)*cj2))+(((-1.4696e-7)*x1032))+((x1029*x1030))+(((2.2044e-7)*sj2))+(((-1.0)*x1030*(px*px))))),IkReal(((2.365e-7)+(((-1.0)*x1035*x1037))+(((1.54e-9)*cj2))+(((-1.0)*x1034*x1037))+(((-1.4696e-7)*x1031))+(((0.0278889999998064)*x1032))+(((0.0412490000002904)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1038.value)))+(x1039.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1040=IKcos(j1);
IkReal x1041=IKsin(j1);
IkReal x1042=(cj0*px);
IkReal x1043=((0.167)*cj2);
IkReal x1044=((4.4e-7)*sj2);
IkReal x1045=((4.4e-7)*cj2);
IkReal x1046=(py*sj0);
IkReal x1047=((0.167)*sj2);
IkReal x1048=(cj2*x1041);
IkReal x1049=((1.0)*x1041);
evalcond[0]=((-6.6e-7)+x1045+((x1040*x1046))+((x1040*x1042))+(((-1.0)*pz*x1049))+(((-1.0)*x1047)));
evalcond[1]=((-0.247)+(((-1.0)*x1046*x1049))+(((-1.0)*pz*x1040))+(((-1.0)*x1042*x1049))+(((-1.0)*x1044))+(((-1.0)*x1043)));
evalcond[2]=((((6.6e-7)*x1041))+((x1040*x1044))+((x1040*x1043))+(((0.247)*x1040))+((x1041*x1047))+(((-1.0)*x1041*x1045))+pz);
evalcond[3]=(x1042+x1046+((x1040*x1045))+(((0.247)*x1041))+((x1041*x1043))+((x1041*x1044))+(((-1.0)*x1040*x1047))+(((-6.6e-7)*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1050=cj2*cj2;
IkReal x1051=(cj0*px);
IkReal x1052=((4.4e-7)*cj2);
IkReal x1053=(cj2*sj2);
IkReal x1054=(py*sj0);
IkReal x1055=((0.167)*sj2);
IkReal x1056=((1.0)*pz);
CheckValue<IkReal> x1057=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1052*x1054))+((x1054*x1055))+(((6.6e-7)*x1051))+(((6.6e-7)*x1054))+((x1051*x1055))+(((0.167)*cj2*pz))+(((4.4e-7)*pz*sj2))+(((0.247)*pz))+(((-1.0)*x1051*x1052)))),-1);
if(!x1057.valid){
continue;
}
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal(((-2.365e-7)+(((-0.0278889999998064)*x1053))+(((-1.54e-9)*cj2))+(((1.4696e-7)*x1050))+(((-1.0)*x1054*x1056))+(((-0.0412490000002904)*sj2))+(((-1.0)*x1051*x1056)))),IkReal(((0.0278890000004356)+(((-0.0278889999998064)*x1050))+(((-1.4696e-7)*x1053))+(((-5.808e-13)*cj2))+(((-1.0)*pz*x1056))+(((2.2044e-7)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1057.value)))+(x1058.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1059=IKcos(j1);
IkReal x1060=IKsin(j1);
IkReal x1061=(cj0*px);
IkReal x1062=((0.167)*cj2);
IkReal x1063=((4.4e-7)*sj2);
IkReal x1064=((4.4e-7)*cj2);
IkReal x1065=(py*sj0);
IkReal x1066=((0.167)*sj2);
IkReal x1067=(cj2*x1060);
IkReal x1068=((1.0)*x1060);
evalcond[0]=((-6.6e-7)+x1064+(((-1.0)*pz*x1068))+((x1059*x1065))+((x1059*x1061))+(((-1.0)*x1066)));
evalcond[1]=((-0.247)+(((-1.0)*pz*x1059))+(((-1.0)*x1061*x1068))+(((-1.0)*x1062))+(((-1.0)*x1063))+(((-1.0)*x1065*x1068)));
evalcond[2]=((((-1.0)*x1060*x1064))+((x1060*x1066))+(((6.6e-7)*x1060))+(((0.247)*x1059))+pz+((x1059*x1062))+((x1059*x1063)));
evalcond[3]=(x1061+x1065+((x1060*x1063))+((x1060*x1062))+(((-1.0)*x1059*x1066))+(((0.247)*x1060))+((x1059*x1064))+(((-6.6e-7)*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1069=cj2*cj2;
IkReal x1070=(cj2*sj2);
IkReal x1071=(py*sj0);
IkReal x1072=((1.0)*pz);
IkReal x1073=((0.167)*cj2);
IkReal x1074=(cj0*px);
IkReal x1075=((4.4e-7)*sj2);
CheckValue<IkReal> x1076=IKPowWithIntegerCheck(IKsign((((x1074*x1075))+((x1071*x1073))+((x1071*x1075))+(((-0.167)*pz*sj2))+(((-6.6e-7)*pz))+(((0.247)*x1074))+(((0.247)*x1071))+((x1073*x1074))+(((4.4e-7)*cj2*pz)))),-1);
if(!x1076.valid){
continue;
}
CheckValue<IkReal> x1077 = IKatan2WithCheck(IkReal(((-0.0610090000001936)+(((-2.1736e-7)*sj2))+(((-0.082498)*cj2))+(pz*pz)+(((-0.0278889999998064)*x1069))+(((-1.4696e-7)*x1070)))),IkReal(((2.365e-7)+(((-1.4696e-7)*x1069))+(((1.54e-9)*cj2))+(((-1.0)*x1071*x1072))+(((-1.0)*x1072*x1074))+(((0.0278889999998064)*x1070))+(((0.0412490000002904)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1077.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1076.value)))+(x1077.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1078=IKcos(j1);
IkReal x1079=IKsin(j1);
IkReal x1080=(cj0*px);
IkReal x1081=((0.167)*cj2);
IkReal x1082=((4.4e-7)*sj2);
IkReal x1083=((4.4e-7)*cj2);
IkReal x1084=(py*sj0);
IkReal x1085=((0.167)*sj2);
IkReal x1086=(cj2*x1079);
IkReal x1087=((1.0)*x1079);
evalcond[0]=((-6.6e-7)+(((-1.0)*pz*x1087))+x1083+((x1078*x1080))+((x1078*x1084))+(((-1.0)*x1085)));
evalcond[1]=((-0.247)+(((-1.0)*pz*x1078))+(((-1.0)*x1080*x1087))+(((-1.0)*x1084*x1087))+(((-1.0)*x1081))+(((-1.0)*x1082)));
evalcond[2]=(((x1079*x1085))+(((6.6e-7)*x1079))+((x1078*x1081))+((x1078*x1082))+(((0.247)*x1078))+(((-1.0)*x1079*x1083))+pz);
evalcond[3]=(((x1079*x1082))+((x1079*x1081))+x1084+x1080+((x1078*x1083))+(((-1.0)*x1078*x1085))+(((0.247)*x1079))+(((-6.6e-7)*x1078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x153=((1.0)*cj0);
IkReal x154=((1.0)*cj1);
IkReal x155=((1.0)*sj2);
IkReal x156=((1.0)*sj1);
IkReal x157=((1.0)*cj2);
IkReal x158=(((r10*sj0))+((cj0*r00)));
IkReal x159=(((r11*sj0))+((cj0*r01)));
IkReal x160=(((r12*sj0))+((cj0*r02)));
IkReal x161=((((1.0)*r12*sj0))+((r02*x153)));
IkReal x162=((((-1.0)*x154*x158))+((r20*sj1)));
IkReal x163=((((-1.0)*x154*x159))+((r21*sj1)));
IkReal x164=((((-1.0)*x154*x160))+((r22*sj1)));
IkReal x165=((1.0)*x162);
IkReal x166=((((-1.0)*x156*x158))+(((-1.0)*r20*x154)));
IkReal x167=((((-1.0)*x156*x159))+(((-1.0)*r21*x154)));
IkReal x168=((((-1.0)*x156*x160))+(((-1.0)*r22*x154)));
new_r00=((((-1.0)*x157*x162))+(((-1.0)*x155*x166)));
new_r01=(((r00*sj0))+(((-1.0)*r10*x153)));
new_r02=(((cj2*x166))+(((-1.0)*x155*x162)));
new_r10=((((-1.0)*x157*x163))+(((-1.0)*x155*x167)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x153)));
new_r12=(((cj2*x167))+(((-1.0)*x155*x163)));
new_r20=((((-1.0)*x157*x164))+(((-1.0)*x155*x168)));
new_r21=(((r02*sj0))+(((-1.0)*r12*x153)));
new_r22=(((cj2*x168))+(((-1.0)*x155*x164)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (new_r22) < -1-IKFAST_SINCOS_THRESH || (new_r22) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x169=IKasin(new_r22);
j4array[0]=((-1.57510634320716)+(((-1.0)*x169)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.56648631038263)+x169);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
j5eval[0]=((((-232.016241299304)*sj4))+(((-1.0)*cj4)));
j5eval[1]=IKsign(((((-0.999990711893641)*sj4))+(((-0.00431000306829228)*cj4))));
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x170=((43099969.3170991)*cj4);
IkReal x171=((9999892881.06866)*sj4);
IkReal x172=((((-1.0)*(new_r02*new_r02)))+(((-1.0)*(new_r12*new_r12))));
j5eval[0]=x172;
j5eval[1]=((IKabs(((((-1.0)*new_r02*x170))+(((-1.0)*new_r02*x171)))))+(IKabs(((((-1.0)*new_r12*x170))+(((-1.0)*new_r12*x171))))));
j5eval[2]=IKsign(x172);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x173=cj4*cj4;
IkReal x174=(cj4*sj4);
IkReal x175=((4309996931925.41)*cj4);
IkReal x176=((999989288156865.0)*sj4);
j3eval[0]=((116.008120649652)+(((-116.005965628102)*x173))+x174);
j3eval[1]=((IKabs((((new_r20*x175))+((new_r20*x176)))))+(IKabs(((((-1.0)*new_r21*x176))+(((-1.0)*new_r21*x175))))));
j3eval[2]=IKsign(((0.999981423873551)+(((-0.999962847747103)*x173))+(((0.00861992607305074)*x174))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.13728263717753)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-326786473.677248)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-326786473.677248)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-326786473.677248)*new_r02))+IKsqr(((-326786473.677248)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-326786473.677248)*new_r02), ((-326786473.677248)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x177=IKcos(j5);
IkReal x178=IKsin(j5);
IkReal x179=(new_r12*x177);
IkReal x180=(new_r02*x178);
IkReal x181=((3.06010217848752e-9)*x177);
IkReal x182=((3.06010217848752e-9)*x178);
evalcond[0]=(x182+new_r02);
evalcond[1]=(x181+new_r12);
evalcond[2]=(((new_r02*x177))+(((-1.0)*new_r12*x178)));
evalcond[3]=((3.06010217848752e-9)+x179+x180);
evalcond[4]=((-3.06010217265237e-9)+(((-0.999999998093152)*x180))+(((-0.999999998093152)*x179)));
evalcond[5]=((-3.81369590936423e-9)+(((-3.06010217848752e-9)*x179))+(((-3.06010217848752e-9)*x180)));
evalcond[6]=((((-1.0)*new_r10*x181))+(((-1.0)*new_r00*x182))+(((0.999999998093152)*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x181))+(((-1.0)*new_r01*x182))+(((0.999999998093152)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-326786473.660909)*new_r20))+(((-3267.86473660909)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((326786473.660909)*new_r21))+(((-3267.86473660909)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-326786473.660909)*new_r20))+(((-3267.86473660909)*new_r21))))+IKsqr(((((326786473.660909)*new_r21))+(((-3267.86473660909)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-326786473.660909)*new_r20))+(((-3267.86473660909)*new_r21))), ((((326786473.660909)*new_r21))+(((-3267.86473660909)*new_r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x183=IKsin(j3);
IkReal x184=IKcos(j3);
IkReal x185=(new_r01*sj5);
IkReal x186=(cj5*new_r11);
IkReal x187=(new_r00*sj5);
IkReal x188=(cj5*new_r10);
IkReal x189=((1.0)*sj5);
IkReal x190=((9.9999999995e-6)*x184);
IkReal x191=((0.99999999995)*x183);
IkReal x192=((0.99999999995)*x184);
IkReal x193=((9.9999999995e-6)*x183);
IkReal x194=(cj5*x184);
IkReal x195=(sj5*x183);
IkReal x196=(cj5*x183);
IkReal x197=(sj5*x184);
IkReal x198=(x191+x190);
evalcond[0]=((((3.06010217833451e-14)*x184))+new_r20+(((3.06010217833451e-9)*x183)));
evalcond[1]=((((3.06010217833451e-14)*x183))+(((-3.06010217833451e-9)*x184))+new_r21);
evalcond[2]=((((9.99999998043152e-6)*x184))+x187+x188+(((0.999999998043152)*x183)));
evalcond[3]=((((9.99999998043152e-6)*x183))+x185+x186+(((-0.999999998043152)*x184)));
evalcond[4]=(((cj5*new_r00))+(((-1.0)*x192))+x193+(((-1.0)*new_r10*x189)));
evalcond[5]=(((cj5*new_r01))+(((-1.0)*x198))+(((-1.0)*new_r11*x189)));
evalcond[6]=((((-0.999999998093152)*x187))+(((-0.999999998093152)*x188))+(((-1.0)*x198))+(((-3.06010217848752e-9)*new_r20)));
evalcond[7]=((((-0.999999998093152)*x186))+(((-0.999999998093152)*x185))+(((-1.0)*x193))+x192+(((-3.06010217848752e-9)*new_r21)));
evalcond[8]=(((cj5*x193))+(((-1.0)*cj5*x192))+(((9.99999998043152e-6)*x197))+(((0.999999998043152)*x195))+new_r00);
evalcond[9]=((((-1.0)*cj5*x191))+(((-1.0)*cj5*x190))+(((9.99999998043152e-6)*x195))+new_r01+(((-0.999999998043152)*x197)));
evalcond[10]=((((-1.0)*sj5*x193))+(((9.99999998043152e-6)*x194))+(((0.999999998043152)*x196))+new_r10+((sj5*x192)));
evalcond[11]=((((9.99999998043152e-6)*x196))+new_r11+(((-0.999999998043152)*x194))+((sj5*x191))+((sj5*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.27887529076732)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((326786473.677248)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((326786473.677248)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((326786473.677248)*new_r02))+IKsqr(((326786473.677248)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((326786473.677248)*new_r02), ((326786473.677248)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x199=IKcos(j5);
IkReal x200=IKsin(j5);
IkReal x201=(new_r12*x199);
IkReal x202=(new_r02*x200);
IkReal x203=((3.06010217848752e-9)*x199);
IkReal x204=((3.06010217848752e-9)*x200);
evalcond[0]=((((-1.0)*x204))+new_r02);
evalcond[1]=((((-1.0)*x203))+new_r12);
evalcond[2]=(((new_r02*x199))+(((-1.0)*new_r12*x200)));
evalcond[3]=((-3.06010217848752e-9)+x202+x201);
evalcond[4]=((-3.06010217265237e-9)+(((0.999999998093152)*x202))+(((0.999999998093152)*x201)));
evalcond[5]=((-3.81369590936423e-9)+(((3.06010217848752e-9)*x201))+(((3.06010217848752e-9)*x202)));
evalcond[6]=(((new_r10*x203))+(((-0.999999998093152)*new_r20))+((new_r00*x204)));
evalcond[7]=(((new_r11*x203))+(((-0.999999998093152)*new_r21))+((new_r01*x204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((3267.86473660909)*new_r21))+(((326786473.660909)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3267.86473660909)*new_r20))+(((-326786473.660909)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3267.86473660909)*new_r21))+(((326786473.660909)*new_r20))))+IKsqr(((((3267.86473660909)*new_r20))+(((-326786473.660909)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((3267.86473660909)*new_r21))+(((326786473.660909)*new_r20))), ((((3267.86473660909)*new_r20))+(((-326786473.660909)*new_r21))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x205=IKcos(j3);
IkReal x206=IKsin(j3);
IkReal x207=(new_r01*sj5);
IkReal x208=(cj5*new_r11);
IkReal x209=(new_r00*sj5);
IkReal x210=(cj5*new_r10);
IkReal x211=((1.0)*sj5);
IkReal x212=((9.9999999995e-6)*x205);
IkReal x213=((0.99999999995)*x206);
IkReal x214=((0.99999999995)*x205);
IkReal x215=((9.9999999995e-6)*x206);
IkReal x216=(cj5*x205);
IkReal x217=(sj5*x206);
IkReal x218=(cj5*x206);
IkReal x219=(sj5*x205);
IkReal x220=(x212+x213);
evalcond[0]=((((-3.06010217833451e-14)*x205))+(((-3.06010217833451e-9)*x206))+new_r20);
evalcond[1]=((((3.06010217833451e-9)*x205))+(((-3.06010217833451e-14)*x206))+new_r21);
evalcond[2]=((((-9.99999998043152e-6)*x205))+(((-0.999999998043152)*x206))+x210+x209);
evalcond[3]=((((-9.99999998043152e-6)*x206))+x207+x208+(((0.999999998043152)*x205)));
evalcond[4]=(((cj5*new_r00))+(((-1.0)*new_r10*x211))+x215+(((-1.0)*x214)));
evalcond[5]=((((-1.0)*new_r11*x211))+((cj5*new_r01))+(((-1.0)*x220)));
evalcond[6]=((((0.999999998093152)*x209))+(((3.06010217848752e-9)*new_r20))+(((0.999999998093152)*x210))+(((-1.0)*x220)));
evalcond[7]=((((0.999999998093152)*x207))+(((0.999999998093152)*x208))+x214+(((3.06010217848752e-9)*new_r21))+(((-1.0)*x215)));
evalcond[8]=(((cj5*x215))+(((-9.99999998043152e-6)*x219))+(((-1.0)*cj5*x214))+(((-0.999999998043152)*x217))+new_r00);
evalcond[9]=((((0.999999998043152)*x219))+(((-9.99999998043152e-6)*x217))+(((-1.0)*cj5*x212))+(((-1.0)*cj5*x213))+new_r01);
evalcond[10]=((((-1.0)*sj5*x215))+((sj5*x214))+(((-9.99999998043152e-6)*x216))+(((-0.999999998043152)*x218))+new_r10);
evalcond[11]=((((0.999999998043152)*x216))+((sj5*x212))+((sj5*x213))+(((-9.99999998043152e-6)*x218))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=1.00000142370203e-15;
j3eval[1]=((((-232.016241299304)*sj4))+(((-1.0)*cj4)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x221=((9999892881.06866)*sj4);
IkReal x222=((43099969.3170991)*cj4);
j5eval[0]=((IKabs((((new_r00*x222))+((new_r00*x221)))))+(IKabs((((new_r10*x221))+((new_r10*x222))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x223=((43099969.3170991)*cj4);
IkReal x224=((9999892881.06866)*sj4);
j5eval[0]=((IKabs((((new_r11*x224))+((new_r11*x223)))))+(IKabs((((new_r01*x223))+((new_r01*x224))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.13728263717753)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
j3array[0]=-9.99999999966667e-6;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=3.14158265358979;
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((3.06010217833451e-14)*(IKsin(j3))))+(((-3.06010217833451e-9)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
IkReal x225=((100000.000005)*sj3);
IkReal x226=((10000000000.5)*cj3);
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=((IKabs(((((-1.0)*new_r10*x226))+((new_r10*x225)))))+(IKabs((((new_r00*x226))+(((-1.0)*new_r00*x225))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
IkReal x227=((10000000000.5)*sj3);
IkReal x228=((100000.000005)*cj3);
IkReal x229=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x229;
j5eval[1]=IKsign(x229);
j5eval[2]=((IKabs(((((-1.0)*new_r10*x228))+(((-1.0)*new_r10*x227)))))+(IKabs((((new_r00*x227))+((new_r00*x228))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[5];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
IkReal x230=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j5eval[0]=x230;
j5eval[1]=IKsign(x230);
j5eval[2]=0.9999985761;
j5eval[3]=cj3;
j5eval[4]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  || IKabs(j5eval[4]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x231=(new_r00*new_r01);
IkReal x232=(new_r10*new_r11);
j5eval[0]=((((-1.0)*x231))+(((-1.0)*x232)));
j5eval[1]=IKsign(((((-10000000001.0)*x232))+(((-10000000001.0)*x231))));
j5eval[2]=((IKabs(((((9999992881.49747)*new_r01))+(((10000000000.5)*new_r10)))))+(IKabs(((((9999992881.49747)*new_r11))+(((-10000000000.5)*new_r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x233=(new_r00*new_r11);
IkReal x234=(new_r01*new_r10);
j5eval[0]=(x233+(((-1.0)*x234)));
j5eval[1]=IKsign(((((-1.0000000001e+15)*x234))+(((1.0000000001e+15)*x233))));
j5eval[2]=((IKabs(((((-999999288149747.0)*new_r11))+(((9999992881.49747)*new_r10)))))+(IKabs(((((-9999992881.49747)*new_r00))+(((999999288149747.0)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x235=(new_r10*new_r11);
IkReal x236=(new_r00*new_r01);
j5eval[0]=(x236+x235);
j5eval[1]=((IKabs(((((10000000000.5)*new_r11))+(((-9999992881.49747)*new_r00)))))+(IKabs(((((-9999992881.49747)*new_r10))+(((-10000000000.5)*new_r01))))));
j5eval[2]=IKsign(((((1.0000000001e+15)*x236))+(((1.0000000001e+15)*x235))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x237=IKPowWithIntegerCheck(IKsign(((((1.0000000001e+15)*new_r10*new_r11))+(((1.0000000001e+15)*new_r00*new_r01)))),-1);
if(!x237.valid){
continue;
}
CheckValue<IkReal> x238 = IKatan2WithCheck(IkReal(((((10000000000.5)*new_r11))+(((-9999992881.49747)*new_r00)))),IkReal(((((-9999992881.49747)*new_r10))+(((-10000000000.5)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x238.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x237.value)))+(x238.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x239=IKcos(j5);
IkReal x240=IKsin(j5);
IkReal x241=(new_r01*x240);
IkReal x242=(new_r11*x239);
IkReal x243=(new_r00*x240);
IkReal x244=((1.0)*x240);
IkReal x245=(new_r10*x239);
evalcond[0]=((3.06010217848752e-9)*x240);
evalcond[1]=((3.06010217848752e-9)*x239);
evalcond[2]=((0.999999288049747)+x243+x245);
evalcond[3]=((9.99999288049747e-6)+x242+x241);
evalcond[4]=((9.9999999995e-6)+((new_r00*x239))+(((-1.0)*new_r10*x244)));
evalcond[5]=((-0.99999999995)+((new_r01*x239))+(((-1.0)*new_r11*x244)));
evalcond[6]=((((9.9999999995e-6)*x239))+(((0.999999288049747)*x240))+new_r00);
evalcond[7]=((((-0.99999999995)*x239))+new_r01+(((9.99999288049747e-6)*x240)));
evalcond[8]=((((-9.9999999995e-6)*x240))+(((0.999999288049747)*x239))+new_r10);
evalcond[9]=((((9.99999288049747e-6)*x239))+(((0.99999999995)*x240))+new_r11);
evalcond[10]=((((-3.06010217848752e-9)*x245))+(((-3.06010217848752e-9)*x243)));
evalcond[11]=((((-3.06010217848752e-9)*x242))+(((-3.06010217848752e-9)*x241)));
evalcond[12]=((-0.99999999995)+(((-0.999999288099747)*x243))+(((-0.999999288099747)*x245)));
evalcond[13]=((-9.9999999995e-6)+(((-0.999999288099747)*x242))+(((-0.999999288099747)*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x246 = IKatan2WithCheck(IkReal(((((-999999288149747.0)*new_r11))+(((9999992881.49747)*new_r10)))),IkReal(((((-9999992881.49747)*new_r00))+(((999999288149747.0)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x246.valid){
continue;
}
CheckValue<IkReal> x247=IKPowWithIntegerCheck(IKsign(((((-1.0000000001e+15)*new_r01*new_r10))+(((1.0000000001e+15)*new_r00*new_r11)))),-1);
if(!x247.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x246.value)+(((1.5707963267949)*(x247.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x248=IKcos(j5);
IkReal x249=IKsin(j5);
IkReal x250=(new_r01*x249);
IkReal x251=(new_r11*x248);
IkReal x252=(new_r00*x249);
IkReal x253=((1.0)*x249);
IkReal x254=(new_r10*x248);
evalcond[0]=((3.06010217848752e-9)*x249);
evalcond[1]=((3.06010217848752e-9)*x248);
evalcond[2]=((0.999999288049747)+x254+x252);
evalcond[3]=((9.99999288049747e-6)+x250+x251);
evalcond[4]=((9.9999999995e-6)+(((-1.0)*new_r10*x253))+((new_r00*x248)));
evalcond[5]=((-0.99999999995)+(((-1.0)*new_r11*x253))+((new_r01*x248)));
evalcond[6]=((((0.999999288049747)*x249))+(((9.9999999995e-6)*x248))+new_r00);
evalcond[7]=(new_r01+(((9.99999288049747e-6)*x249))+(((-0.99999999995)*x248)));
evalcond[8]=((((-9.9999999995e-6)*x249))+(((0.999999288049747)*x248))+new_r10);
evalcond[9]=((((0.99999999995)*x249))+new_r11+(((9.99999288049747e-6)*x248)));
evalcond[10]=((((-3.06010217848752e-9)*x252))+(((-3.06010217848752e-9)*x254)));
evalcond[11]=((((-3.06010217848752e-9)*x251))+(((-3.06010217848752e-9)*x250)));
evalcond[12]=((-0.99999999995)+(((-0.999999288099747)*x254))+(((-0.999999288099747)*x252)));
evalcond[13]=((-9.9999999995e-6)+(((-0.999999288099747)*x250))+(((-0.999999288099747)*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKsign(((((-10000000001.0)*new_r00*new_r01))+(((-10000000001.0)*new_r10*new_r11)))),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r01))+(((10000000000.5)*new_r10)))),IkReal(((((9999992881.49747)*new_r11))+(((-10000000000.5)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x256.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x255.value)))+(x256.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x257=IKcos(j5);
IkReal x258=IKsin(j5);
IkReal x259=(new_r01*x258);
IkReal x260=(new_r11*x257);
IkReal x261=(new_r00*x258);
IkReal x262=((1.0)*x258);
IkReal x263=(new_r10*x257);
evalcond[0]=((3.06010217848752e-9)*x258);
evalcond[1]=((3.06010217848752e-9)*x257);
evalcond[2]=((0.999999288049747)+x261+x263);
evalcond[3]=((9.99999288049747e-6)+x259+x260);
evalcond[4]=((9.9999999995e-6)+((new_r00*x257))+(((-1.0)*new_r10*x262)));
evalcond[5]=((-0.99999999995)+((new_r01*x257))+(((-1.0)*new_r11*x262)));
evalcond[6]=((((9.9999999995e-6)*x257))+new_r00+(((0.999999288049747)*x258)));
evalcond[7]=((((9.99999288049747e-6)*x258))+(((-0.99999999995)*x257))+new_r01);
evalcond[8]=((((-9.9999999995e-6)*x258))+new_r10+(((0.999999288049747)*x257)));
evalcond[9]=((((9.99999288049747e-6)*x257))+new_r11+(((0.99999999995)*x258)));
evalcond[10]=((((-3.06010217848752e-9)*x261))+(((-3.06010217848752e-9)*x263)));
evalcond[11]=((((-3.06010217848752e-9)*x260))+(((-3.06010217848752e-9)*x259)));
evalcond[12]=((-0.99999999995)+(((-0.999999288099747)*x263))+(((-0.999999288099747)*x261)));
evalcond[13]=((-9.9999999995e-6)+(((-0.999999288099747)*x259))+(((-0.999999288099747)*x260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x264=(new_r00*new_r01);
IkReal x265=(new_r10*new_r11);
j5eval[0]=(x265+x264);
j5eval[1]=((IKabs(((((9999992881.49747)*new_r01))+(((10000000000.5)*new_r10)))))+(IKabs(((((9999992881.49747)*new_r11))+(((-10000000000.5)*new_r00))))));
j5eval[2]=IKsign(((((10000000001.0)*x265))+(((10000000001.0)*x264))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x266=(new_r10*new_r11);
IkReal x267=(new_r00*new_r01);
j5eval[0]=(x267+x266);
j5eval[1]=((IKabs(((((9999992881.49747)*new_r00))+(((-10000000000.5)*new_r11)))))+(IKabs(((((9999992881.49747)*new_r10))+(((10000000000.5)*new_r01))))));
j5eval[2]=IKsign(((((1.0000000001e+15)*x266))+(((1.0000000001e+15)*x267))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=0.00431;
cj4=-0.99999071;
j4=3.137282657685;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x268=(new_r00*new_r11);
IkReal x269=(new_r01*new_r10);
j5eval[0]=((((-1.0)*x269))+x268);
j5eval[1]=IKsign(((((-1.0000000001e+15)*x269))+(((1.0000000001e+15)*x268))));
j5eval[2]=((IKabs(((((9999992881.49747)*new_r00))+(((-999999288149747.0)*new_r01)))))+(IKabs(((((-9999992881.49747)*new_r10))+(((999999288149747.0)*new_r11))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x270 = IKatan2WithCheck(IkReal(((((-9999992881.49747)*new_r10))+(((999999288149747.0)*new_r11)))),IkReal(((((9999992881.49747)*new_r00))+(((-999999288149747.0)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x270.valid){
continue;
}
CheckValue<IkReal> x271=IKPowWithIntegerCheck(IKsign(((((-1.0000000001e+15)*new_r01*new_r10))+(((1.0000000001e+15)*new_r00*new_r11)))),-1);
if(!x271.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x270.value)+(((1.5707963267949)*(x271.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x272=IKcos(j5);
IkReal x273=IKsin(j5);
IkReal x274=(new_r01*x273);
IkReal x275=(new_r11*x272);
IkReal x276=(new_r00*x273);
IkReal x277=((1.0)*x273);
IkReal x278=(new_r10*x272);
evalcond[0]=((3.06010217848752e-9)*x273);
evalcond[1]=((3.06010217848752e-9)*x272);
evalcond[2]=((-0.999999288049747)+x276+x278);
evalcond[3]=((-9.99999288049747e-6)+x274+x275);
evalcond[4]=((-9.9999999995e-6)+((new_r00*x272))+(((-1.0)*new_r10*x277)));
evalcond[5]=((0.99999999995)+(((-1.0)*new_r11*x277))+((new_r01*x272)));
evalcond[6]=((((-9.9999999995e-6)*x272))+(((-0.999999288049747)*x273))+new_r00);
evalcond[7]=((((-9.99999288049747e-6)*x273))+(((0.99999999995)*x272))+new_r01);
evalcond[8]=((((9.9999999995e-6)*x273))+(((-0.999999288049747)*x272))+new_r10);
evalcond[9]=((((-9.99999288049747e-6)*x272))+new_r11+(((-0.99999999995)*x273)));
evalcond[10]=((((-3.06010217848752e-9)*x278))+(((-3.06010217848752e-9)*x276)));
evalcond[11]=((((-3.06010217848752e-9)*x275))+(((-3.06010217848752e-9)*x274)));
evalcond[12]=((0.99999999995)+(((-0.999999288099747)*x276))+(((-0.999999288099747)*x278)));
evalcond[13]=((9.9999999995e-6)+(((-0.999999288099747)*x274))+(((-0.999999288099747)*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r00))+(((-10000000000.5)*new_r11)))),IkReal(((((9999992881.49747)*new_r10))+(((10000000000.5)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
CheckValue<IkReal> x280=IKPowWithIntegerCheck(IKsign(((((1.0000000001e+15)*new_r10*new_r11))+(((1.0000000001e+15)*new_r00*new_r01)))),-1);
if(!x280.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x279.value)+(((1.5707963267949)*(x280.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x281=IKcos(j5);
IkReal x282=IKsin(j5);
IkReal x283=(new_r01*x282);
IkReal x284=(new_r11*x281);
IkReal x285=(new_r00*x282);
IkReal x286=((1.0)*x282);
IkReal x287=(new_r10*x281);
evalcond[0]=((3.06010217848752e-9)*x282);
evalcond[1]=((3.06010217848752e-9)*x281);
evalcond[2]=((-0.999999288049747)+x287+x285);
evalcond[3]=((-9.99999288049747e-6)+x284+x283);
evalcond[4]=((-9.9999999995e-6)+(((-1.0)*new_r10*x286))+((new_r00*x281)));
evalcond[5]=((0.99999999995)+(((-1.0)*new_r11*x286))+((new_r01*x281)));
evalcond[6]=((((-9.9999999995e-6)*x281))+new_r00+(((-0.999999288049747)*x282)));
evalcond[7]=((((0.99999999995)*x281))+new_r01+(((-9.99999288049747e-6)*x282)));
evalcond[8]=(new_r10+(((-0.999999288049747)*x281))+(((9.9999999995e-6)*x282)));
evalcond[9]=((((-0.99999999995)*x282))+new_r11+(((-9.99999288049747e-6)*x281)));
evalcond[10]=((((-3.06010217848752e-9)*x287))+(((-3.06010217848752e-9)*x285)));
evalcond[11]=((((-3.06010217848752e-9)*x283))+(((-3.06010217848752e-9)*x284)));
evalcond[12]=((0.99999999995)+(((-0.999999288099747)*x285))+(((-0.999999288099747)*x287)));
evalcond[13]=((9.9999999995e-6)+(((-0.999999288099747)*x284))+(((-0.999999288099747)*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x288 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r01))+(((10000000000.5)*new_r10)))),IkReal(((((9999992881.49747)*new_r11))+(((-10000000000.5)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
CheckValue<IkReal> x289=IKPowWithIntegerCheck(IKsign(((((10000000001.0)*new_r00*new_r01))+(((10000000001.0)*new_r10*new_r11)))),-1);
if(!x289.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x288.value)+(((1.5707963267949)*(x289.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x290=IKcos(j5);
IkReal x291=IKsin(j5);
IkReal x292=(new_r01*x291);
IkReal x293=(new_r11*x290);
IkReal x294=(new_r00*x291);
IkReal x295=((1.0)*x291);
IkReal x296=(new_r10*x290);
evalcond[0]=((3.06010217848752e-9)*x291);
evalcond[1]=((3.06010217848752e-9)*x290);
evalcond[2]=((-0.999999288049747)+x294+x296);
evalcond[3]=((-9.99999288049747e-6)+x292+x293);
evalcond[4]=((-9.9999999995e-6)+(((-1.0)*new_r10*x295))+((new_r00*x290)));
evalcond[5]=((0.99999999995)+(((-1.0)*new_r11*x295))+((new_r01*x290)));
evalcond[6]=((((-9.9999999995e-6)*x290))+(((-0.999999288049747)*x291))+new_r00);
evalcond[7]=((((-9.99999288049747e-6)*x291))+new_r01+(((0.99999999995)*x290)));
evalcond[8]=((((9.9999999995e-6)*x291))+(((-0.999999288049747)*x290))+new_r10);
evalcond[9]=((((-9.99999288049747e-6)*x290))+new_r11+(((-0.99999999995)*x291)));
evalcond[10]=((((-3.06010217848752e-9)*x296))+(((-3.06010217848752e-9)*x294)));
evalcond[11]=((((-3.06010217848752e-9)*x292))+(((-3.06010217848752e-9)*x293)));
evalcond[12]=((0.99999999995)+(((-0.999999288099747)*x294))+(((-0.999999288099747)*x296)));
evalcond[13]=((9.9999999995e-6)+(((-0.999999288099747)*x293))+(((-0.999999288099747)*x292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x297=((0.999999288049747)*cj3);
IkReal x298=((9.99999288049746e-6)*sj3);
CheckValue<IkReal> x299=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x297))+((new_r10*x298)))),IkReal((((new_r00*x297))+(((-1.0)*new_r00*x298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x300.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x299.value)))+(x300.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x301=IKcos(j5);
IkReal x302=IKsin(j5);
IkReal x303=((0.99999999995)*sj3);
IkReal x304=((9.9999999995e-6)*cj3);
IkReal x305=((0.99999999995)*cj3);
IkReal x306=((9.9999999995e-6)*sj3);
IkReal x307=((0.999999288049747)*cj3);
IkReal x308=(sj3*x302);
IkReal x309=(new_r01*x302);
IkReal x310=(new_r11*x301);
IkReal x311=(new_r00*x302);
IkReal x312=((1.0)*x302);
IkReal x313=(new_r10*x301);
IkReal x314=(cj3*x301);
IkReal x315=(cj3*x302);
IkReal x316=(sj3*x301);
IkReal x317=(x304+x303);
evalcond[0]=((3.06010217848752e-9)*x302);
evalcond[1]=((3.06010217848752e-9)*x301);
evalcond[2]=((((-3.06010217848752e-9)*x311))+(((-3.06010217848752e-9)*x313)));
evalcond[3]=((((-3.06010217848752e-9)*x309))+(((-3.06010217848752e-9)*x310)));
evalcond[4]=((((9.99999288049746e-6)*cj3))+x311+x313+(((0.999999288049747)*sj3)));
evalcond[5]=((((9.99999288049746e-6)*sj3))+x309+x310+(((-1.0)*x307)));
evalcond[6]=(((new_r00*x301))+x306+(((-1.0)*new_r10*x312))+(((-1.0)*x305)));
evalcond[7]=(((new_r01*x301))+(((-1.0)*new_r11*x312))+(((-1.0)*x317)));
evalcond[8]=((((-1.0)*x317))+(((-0.999999288099747)*x313))+(((-0.999999288099747)*x311)));
evalcond[9]=(x305+(((-0.999999288099747)*x310))+(((-1.0)*x306))+(((-0.999999288099747)*x309)));
evalcond[10]=(((x301*x306))+(((-1.0)*x301*x305))+(((0.999999288049747)*x308))+new_r00+(((9.99999288049746e-6)*x315)));
evalcond[11]=((((-1.0)*x301*x304))+(((-1.0)*x301*x303))+(((9.99999288049746e-6)*x308))+(((-1.0)*x302*x307))+new_r01);
evalcond[12]=((((0.999999288049747)*x316))+(((-1.0)*x302*x306))+((x302*x305))+new_r10+(((9.99999288049746e-6)*x314)));
evalcond[13]=((((-1.0)*x301*x307))+((x302*x304))+((x302*x303))+new_r11+(((9.99999288049746e-6)*x316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x318=((0.99999999995)*sj3);
IkReal x319=((9.9999999995e-6)*cj3);
CheckValue<IkReal> x320 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x319))+(((-1.0)*new_r10*x318)))),IkReal((((new_r00*x319))+((new_r00*x318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x320.valid){
continue;
}
CheckValue<IkReal> x321=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x321.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x320.value)+(((1.5707963267949)*(x321.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x322=IKcos(j5);
IkReal x323=IKsin(j5);
IkReal x324=((0.99999999995)*sj3);
IkReal x325=((9.9999999995e-6)*cj3);
IkReal x326=((0.99999999995)*cj3);
IkReal x327=((9.9999999995e-6)*sj3);
IkReal x328=((0.999999288049747)*cj3);
IkReal x329=(sj3*x323);
IkReal x330=(new_r01*x323);
IkReal x331=(new_r11*x322);
IkReal x332=(new_r00*x323);
IkReal x333=((1.0)*x323);
IkReal x334=(new_r10*x322);
IkReal x335=(cj3*x322);
IkReal x336=(cj3*x323);
IkReal x337=(sj3*x322);
IkReal x338=(x324+x325);
evalcond[0]=((3.06010217848752e-9)*x323);
evalcond[1]=((3.06010217848752e-9)*x322);
evalcond[2]=((((-3.06010217848752e-9)*x332))+(((-3.06010217848752e-9)*x334)));
evalcond[3]=((((-3.06010217848752e-9)*x331))+(((-3.06010217848752e-9)*x330)));
evalcond[4]=((((9.99999288049746e-6)*cj3))+x332+x334+(((0.999999288049747)*sj3)));
evalcond[5]=((((-1.0)*x328))+(((9.99999288049746e-6)*sj3))+x331+x330);
evalcond[6]=((((-1.0)*new_r10*x333))+((new_r00*x322))+(((-1.0)*x326))+x327);
evalcond[7]=((((-1.0)*new_r11*x333))+((new_r01*x322))+(((-1.0)*x338)));
evalcond[8]=((((-0.999999288099747)*x334))+(((-0.999999288099747)*x332))+(((-1.0)*x338)));
evalcond[9]=((((-0.999999288099747)*x331))+(((-0.999999288099747)*x330))+(((-1.0)*x327))+x326);
evalcond[10]=((((9.99999288049746e-6)*x336))+((x322*x327))+(((-1.0)*x322*x326))+new_r00+(((0.999999288049747)*x329)));
evalcond[11]=((((-1.0)*x322*x324))+(((-1.0)*x322*x325))+(((-1.0)*x323*x328))+(((9.99999288049746e-6)*x329))+new_r01);
evalcond[12]=((((9.99999288049746e-6)*x335))+((x323*x326))+(((-1.0)*x323*x327))+(((0.999999288049747)*x337))+new_r10);
evalcond[13]=((((9.99999288049746e-6)*x337))+((x323*x325))+((x323*x324))+(((-1.0)*x322*x328))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x339=((9.9999999995e-6)*sj3);
IkReal x340=((0.99999999995)*cj3);
CheckValue<IkReal> x341=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x341.valid){
continue;
}
CheckValue<IkReal> x342 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x340))+((new_r10*x339)))),IkReal((((new_r00*x340))+(((-1.0)*new_r00*x339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x342.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x341.value)))+(x342.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x343=IKcos(j5);
IkReal x344=IKsin(j5);
IkReal x345=((0.99999999995)*sj3);
IkReal x346=((9.9999999995e-6)*cj3);
IkReal x347=((0.99999999995)*cj3);
IkReal x348=((9.9999999995e-6)*sj3);
IkReal x349=((0.999999288049747)*cj3);
IkReal x350=(sj3*x344);
IkReal x351=(new_r01*x344);
IkReal x352=(new_r11*x343);
IkReal x353=(new_r00*x344);
IkReal x354=((1.0)*x344);
IkReal x355=(new_r10*x343);
IkReal x356=(cj3*x343);
IkReal x357=(cj3*x344);
IkReal x358=(sj3*x343);
IkReal x359=(x346+x345);
evalcond[0]=((3.06010217848752e-9)*x344);
evalcond[1]=((3.06010217848752e-9)*x343);
evalcond[2]=((((-3.06010217848752e-9)*x353))+(((-3.06010217848752e-9)*x355)));
evalcond[3]=((((-3.06010217848752e-9)*x352))+(((-3.06010217848752e-9)*x351)));
evalcond[4]=((((9.99999288049746e-6)*cj3))+x353+x355+(((0.999999288049747)*sj3)));
evalcond[5]=((((9.99999288049746e-6)*sj3))+x351+x352+(((-1.0)*x349)));
evalcond[6]=(((new_r00*x343))+x348+(((-1.0)*x347))+(((-1.0)*new_r10*x354)));
evalcond[7]=((((-1.0)*x359))+((new_r01*x343))+(((-1.0)*new_r11*x354)));
evalcond[8]=((((-1.0)*x359))+(((-0.999999288099747)*x353))+(((-0.999999288099747)*x355)));
evalcond[9]=((((-0.999999288099747)*x351))+(((-0.999999288099747)*x352))+x347+(((-1.0)*x348)));
evalcond[10]=((((9.99999288049746e-6)*x357))+(((0.999999288049747)*x350))+(((-1.0)*x343*x347))+new_r00+((x343*x348)));
evalcond[11]=((((-1.0)*x344*x349))+(((9.99999288049746e-6)*x350))+(((-1.0)*x343*x345))+(((-1.0)*x343*x346))+new_r01);
evalcond[12]=((((-1.0)*x344*x348))+((x344*x347))+(((9.99999288049746e-6)*x356))+(((0.999999288049747)*x358))+new_r10);
evalcond[13]=(((x344*x346))+((x344*x345))+(((9.99999288049746e-6)*x358))+(((-1.0)*x343*x349))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.27887529076732)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
j3array[0]=3.14158265358979;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=6.28317530717959;
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((3.06010217833451e-9)*(IKcos(j3))))+(((-3.06010217833451e-14)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
IkReal x360=((100000.000005)*sj3);
IkReal x361=((10000000000.5)*cj3);
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=((IKabs(((((-1.0)*new_r10*x361))+((new_r10*x360)))))+(IKabs(((((-1.0)*new_r00*x360))+((new_r00*x361))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
IkReal x362=((10000000000.5)*sj3);
IkReal x363=((100000.000005)*cj3);
IkReal x364=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x364;
j5eval[1]=IKsign(x364);
j5eval[2]=((IKabs((((new_r00*x362))+((new_r00*x363)))))+(IKabs(((((-1.0)*new_r10*x362))+(((-1.0)*new_r10*x363))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[5];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
IkReal x365=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j5eval[0]=x365;
j5eval[1]=0.9999985761;
j5eval[2]=cj3;
j5eval[3]=1.0;
j5eval[4]=IKsign(x365);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  || IKabs(j5eval[4]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x366=(new_r00*new_r01);
IkReal x367=(new_r10*new_r11);
j5eval[0]=(x366+x367);
j5eval[1]=((IKabs(((((9999992881.49747)*new_r01))+(((-10000000000.5)*new_r10)))))+(IKabs(((((9999992881.49747)*new_r11))+(((10000000000.5)*new_r00))))));
j5eval[2]=IKsign(((((10000000001.0)*x366))+(((10000000001.0)*x367))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x368=(new_r10*new_r11);
IkReal x369=(new_r00*new_r01);
j5eval[0]=(x368+x369);
j5eval[1]=((IKabs(((((9999992881.49747)*new_r00))+(((10000000000.5)*new_r11)))))+(IKabs(((((9999992881.49747)*new_r10))+(((-10000000000.5)*new_r01))))));
j5eval[2]=IKsign(((((1.0000000001e+15)*x368))+(((1.0000000001e+15)*x369))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x370=(new_r00*new_r11);
IkReal x371=(new_r01*new_r10);
j5eval[0]=((((-1.0)*x371))+x370);
j5eval[1]=IKsign(((((-1.0000000001e+15)*x371))+(((1.0000000001e+15)*x370))));
j5eval[2]=((IKabs(((((9999992881.49747)*new_r00))+(((-999999288149747.0)*new_r01)))))+(IKabs(((((-9999992881.49747)*new_r10))+(((999999288149747.0)*new_r11))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x372 = IKatan2WithCheck(IkReal(((((-9999992881.49747)*new_r10))+(((999999288149747.0)*new_r11)))),IkReal(((((9999992881.49747)*new_r00))+(((-999999288149747.0)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(IKsign(((((-1.0000000001e+15)*new_r01*new_r10))+(((1.0000000001e+15)*new_r00*new_r11)))),-1);
if(!x373.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x372.value)+(((1.5707963267949)*(x373.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x374=IKcos(j5);
IkReal x375=IKsin(j5);
IkReal x376=(new_r01*x375);
IkReal x377=(new_r11*x374);
IkReal x378=(new_r00*x375);
IkReal x379=((1.0)*x375);
IkReal x380=(new_r10*x374);
evalcond[0]=((-3.06010217848752e-9)*x375);
evalcond[1]=((-3.06010217848752e-9)*x374);
evalcond[2]=((-0.999999288049747)+x380+x378);
evalcond[3]=((-9.99999288049747e-6)+x377+x376);
evalcond[4]=((9.9999999995e-6)+((new_r00*x374))+(((-1.0)*new_r10*x379)));
evalcond[5]=((-0.99999999995)+((new_r01*x374))+(((-1.0)*new_r11*x379)));
evalcond[6]=((((9.9999999995e-6)*x374))+new_r00+(((-0.999999288049747)*x375)));
evalcond[7]=((((-0.99999999995)*x374))+(((-9.99999288049747e-6)*x375))+new_r01);
evalcond[8]=((((-9.9999999995e-6)*x375))+new_r10+(((-0.999999288049747)*x374)));
evalcond[9]=((((0.99999999995)*x375))+(((-9.99999288049747e-6)*x374))+new_r11);
evalcond[10]=((((3.06010217848752e-9)*x380))+(((3.06010217848752e-9)*x378)));
evalcond[11]=((((3.06010217848752e-9)*x376))+(((3.06010217848752e-9)*x377)));
evalcond[12]=((-0.99999999995)+(((0.999999288099747)*x378))+(((0.999999288099747)*x380)));
evalcond[13]=((-9.9999999995e-6)+(((0.999999288099747)*x377))+(((0.999999288099747)*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x381=IKPowWithIntegerCheck(IKsign(((((1.0000000001e+15)*new_r10*new_r11))+(((1.0000000001e+15)*new_r00*new_r01)))),-1);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r00))+(((10000000000.5)*new_r11)))),IkReal(((((9999992881.49747)*new_r10))+(((-10000000000.5)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x382.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x381.value)))+(x382.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x383=IKcos(j5);
IkReal x384=IKsin(j5);
IkReal x385=(new_r01*x384);
IkReal x386=(new_r11*x383);
IkReal x387=(new_r00*x384);
IkReal x388=((1.0)*x384);
IkReal x389=(new_r10*x383);
evalcond[0]=((-3.06010217848752e-9)*x384);
evalcond[1]=((-3.06010217848752e-9)*x383);
evalcond[2]=((-0.999999288049747)+x387+x389);
evalcond[3]=((-9.99999288049747e-6)+x386+x385);
evalcond[4]=((9.9999999995e-6)+(((-1.0)*new_r10*x388))+((new_r00*x383)));
evalcond[5]=((-0.99999999995)+((new_r01*x383))+(((-1.0)*new_r11*x388)));
evalcond[6]=((((9.9999999995e-6)*x383))+(((-0.999999288049747)*x384))+new_r00);
evalcond[7]=((((-0.99999999995)*x383))+(((-9.99999288049747e-6)*x384))+new_r01);
evalcond[8]=((((-0.999999288049747)*x383))+(((-9.9999999995e-6)*x384))+new_r10);
evalcond[9]=((((0.99999999995)*x384))+(((-9.99999288049747e-6)*x383))+new_r11);
evalcond[10]=((((3.06010217848752e-9)*x389))+(((3.06010217848752e-9)*x387)));
evalcond[11]=((((3.06010217848752e-9)*x385))+(((3.06010217848752e-9)*x386)));
evalcond[12]=((-0.99999999995)+(((0.999999288099747)*x389))+(((0.999999288099747)*x387)));
evalcond[13]=((-9.9999999995e-6)+(((0.999999288099747)*x386))+(((0.999999288099747)*x385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(((((10000000001.0)*new_r00*new_r01))+(((10000000001.0)*new_r10*new_r11)))),-1);
if(!x390.valid){
continue;
}
CheckValue<IkReal> x391 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r01))+(((-10000000000.5)*new_r10)))),IkReal(((((9999992881.49747)*new_r11))+(((10000000000.5)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x391.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x390.value)))+(x391.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x392=IKcos(j5);
IkReal x393=IKsin(j5);
IkReal x394=(new_r01*x393);
IkReal x395=(new_r11*x392);
IkReal x396=(new_r00*x393);
IkReal x397=((1.0)*x393);
IkReal x398=(new_r10*x392);
evalcond[0]=((-3.06010217848752e-9)*x393);
evalcond[1]=((-3.06010217848752e-9)*x392);
evalcond[2]=((-0.999999288049747)+x396+x398);
evalcond[3]=((-9.99999288049747e-6)+x395+x394);
evalcond[4]=((9.9999999995e-6)+(((-1.0)*new_r10*x397))+((new_r00*x392)));
evalcond[5]=((-0.99999999995)+((new_r01*x392))+(((-1.0)*new_r11*x397)));
evalcond[6]=((((9.9999999995e-6)*x392))+new_r00+(((-0.999999288049747)*x393)));
evalcond[7]=((((-9.99999288049747e-6)*x393))+(((-0.99999999995)*x392))+new_r01);
evalcond[8]=(new_r10+(((-9.9999999995e-6)*x393))+(((-0.999999288049747)*x392)));
evalcond[9]=((((-9.99999288049747e-6)*x392))+new_r11+(((0.99999999995)*x393)));
evalcond[10]=((((3.06010217848752e-9)*x396))+(((3.06010217848752e-9)*x398)));
evalcond[11]=((((3.06010217848752e-9)*x394))+(((3.06010217848752e-9)*x395)));
evalcond[12]=((-0.99999999995)+(((0.999999288099747)*x398))+(((0.999999288099747)*x396)));
evalcond[13]=((-9.9999999995e-6)+(((0.999999288099747)*x395))+(((0.999999288099747)*x394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x399=(new_r00*new_r01);
IkReal x400=(new_r10*new_r11);
j5eval[0]=((((-1.0)*x399))+(((-1.0)*x400)));
j5eval[1]=IKsign(((((-1.0000000001e+15)*x399))+(((-1.0000000001e+15)*x400))));
j5eval[2]=((IKabs(((((9999992881.49747)*new_r00))+(((10000000000.5)*new_r11)))))+(IKabs(((((9999992881.49747)*new_r10))+(((-10000000000.5)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x401=(new_r00*new_r11);
IkReal x402=(new_r01*new_r10);
j5eval[0]=(x401+(((-1.0)*x402)));
j5eval[1]=IKsign(((((1.0000000001e+15)*x401))+(((-1.0000000001e+15)*x402))));
j5eval[2]=((IKabs(((((-999999288149747.0)*new_r11))+(((9999992881.49747)*new_r10)))))+(IKabs(((((-9999992881.49747)*new_r00))+(((999999288149747.0)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-0.00431;
cj4=0.99999071;
j4=6.27887537053998;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=-1.0;
j5eval[1]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x403=IKPowWithIntegerCheck(IKsign(((((-10000000001.0)*(new_r00*new_r00)))+(((-10000000001.0)*(new_r10*new_r10))))),-1);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r00))+(((100000.000005)*new_r10)))),IkReal(((((9999992881.49747)*new_r10))+(((-100000.000005)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x404.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x403.value)))+(x404.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x405=IKcos(j5);
IkReal x406=IKsin(j5);
IkReal x407=(new_r01*x406);
IkReal x408=(new_r11*x405);
IkReal x409=(new_r00*x406);
IkReal x410=((1.0)*x406);
IkReal x411=(new_r10*x405);
evalcond[0]=((-3.06010217848752e-9)*x406);
evalcond[1]=((-3.06010217848752e-9)*x405);
evalcond[2]=((0.999999288049747)+x409+x411);
evalcond[3]=((9.99999288049747e-6)+x407+x408);
evalcond[4]=((-9.9999999995e-6)+(((-1.0)*new_r10*x410))+((new_r00*x405)));
evalcond[5]=((0.99999999995)+(((-1.0)*new_r11*x410))+((new_r01*x405)));
evalcond[6]=((((-9.9999999995e-6)*x405))+new_r00+(((0.999999288049747)*x406)));
evalcond[7]=((((9.99999288049747e-6)*x406))+new_r01+(((0.99999999995)*x405)));
evalcond[8]=((((9.9999999995e-6)*x406))+new_r10+(((0.999999288049747)*x405)));
evalcond[9]=((((9.99999288049747e-6)*x405))+new_r11+(((-0.99999999995)*x406)));
evalcond[10]=((((3.06010217848752e-9)*x411))+(((3.06010217848752e-9)*x409)));
evalcond[11]=((((3.06010217848752e-9)*x407))+(((3.06010217848752e-9)*x408)));
evalcond[12]=((0.99999999995)+(((0.999999288099747)*x409))+(((0.999999288099747)*x411)));
evalcond[13]=((9.9999999995e-6)+(((0.999999288099747)*x408))+(((0.999999288099747)*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x412 = IKatan2WithCheck(IkReal(((((-999999288149747.0)*new_r11))+(((9999992881.49747)*new_r10)))),IkReal(((((-9999992881.49747)*new_r00))+(((999999288149747.0)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413=IKPowWithIntegerCheck(IKsign(((((-1.0000000001e+15)*new_r01*new_r10))+(((1.0000000001e+15)*new_r00*new_r11)))),-1);
if(!x413.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x412.value)+(((1.5707963267949)*(x413.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x414=IKcos(j5);
IkReal x415=IKsin(j5);
IkReal x416=(new_r01*x415);
IkReal x417=(new_r11*x414);
IkReal x418=(new_r00*x415);
IkReal x419=((1.0)*x415);
IkReal x420=(new_r10*x414);
evalcond[0]=((-3.06010217848752e-9)*x415);
evalcond[1]=((-3.06010217848752e-9)*x414);
evalcond[2]=((0.999999288049747)+x418+x420);
evalcond[3]=((9.99999288049747e-6)+x416+x417);
evalcond[4]=((-9.9999999995e-6)+((new_r00*x414))+(((-1.0)*new_r10*x419)));
evalcond[5]=((0.99999999995)+(((-1.0)*new_r11*x419))+((new_r01*x414)));
evalcond[6]=((((-9.9999999995e-6)*x414))+(((0.999999288049747)*x415))+new_r00);
evalcond[7]=((((9.99999288049747e-6)*x415))+(((0.99999999995)*x414))+new_r01);
evalcond[8]=((((9.9999999995e-6)*x415))+(((0.999999288049747)*x414))+new_r10);
evalcond[9]=((((9.99999288049747e-6)*x414))+(((-0.99999999995)*x415))+new_r11);
evalcond[10]=((((3.06010217848752e-9)*x418))+(((3.06010217848752e-9)*x420)));
evalcond[11]=((((3.06010217848752e-9)*x417))+(((3.06010217848752e-9)*x416)));
evalcond[12]=((0.99999999995)+(((0.999999288099747)*x420))+(((0.999999288099747)*x418)));
evalcond[13]=((9.9999999995e-6)+(((0.999999288099747)*x416))+(((0.999999288099747)*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x421=IKPowWithIntegerCheck(IKsign(((((-1.0000000001e+15)*new_r00*new_r01))+(((-1.0000000001e+15)*new_r10*new_r11)))),-1);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422 = IKatan2WithCheck(IkReal(((((9999992881.49747)*new_r00))+(((10000000000.5)*new_r11)))),IkReal(((((9999992881.49747)*new_r10))+(((-10000000000.5)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x422.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x421.value)))+(x422.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x423=IKcos(j5);
IkReal x424=IKsin(j5);
IkReal x425=(new_r01*x424);
IkReal x426=(new_r11*x423);
IkReal x427=(new_r00*x424);
IkReal x428=((1.0)*x424);
IkReal x429=(new_r10*x423);
evalcond[0]=((-3.06010217848752e-9)*x424);
evalcond[1]=((-3.06010217848752e-9)*x423);
evalcond[2]=((0.999999288049747)+x429+x427);
evalcond[3]=((9.99999288049747e-6)+x426+x425);
evalcond[4]=((-9.9999999995e-6)+(((-1.0)*new_r10*x428))+((new_r00*x423)));
evalcond[5]=((0.99999999995)+(((-1.0)*new_r11*x428))+((new_r01*x423)));
evalcond[6]=((((-9.9999999995e-6)*x423))+new_r00+(((0.999999288049747)*x424)));
evalcond[7]=((((9.99999288049747e-6)*x424))+(((0.99999999995)*x423))+new_r01);
evalcond[8]=((((9.9999999995e-6)*x424))+new_r10+(((0.999999288049747)*x423)));
evalcond[9]=((((9.99999288049747e-6)*x423))+new_r11+(((-0.99999999995)*x424)));
evalcond[10]=((((3.06010217848752e-9)*x429))+(((3.06010217848752e-9)*x427)));
evalcond[11]=((((3.06010217848752e-9)*x425))+(((3.06010217848752e-9)*x426)));
evalcond[12]=((0.99999999995)+(((0.999999288099747)*x427))+(((0.999999288099747)*x429)));
evalcond[13]=((9.9999999995e-6)+(((0.999999288099747)*x426))+(((0.999999288099747)*x425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x430=((0.999999288049747)*cj3);
IkReal x431=((9.99999288049746e-6)*sj3);
CheckValue<IkReal> x432 = IKatan2WithCheck(IkReal((((new_r10*x430))+(((-1.0)*new_r10*x431)))),IkReal(((((-1.0)*new_r00*x430))+((new_r00*x431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x432.valid){
continue;
}
CheckValue<IkReal> x433=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x433.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x432.value)+(((1.5707963267949)*(x433.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x434=IKcos(j5);
IkReal x435=IKsin(j5);
IkReal x436=((0.99999999995)*sj3);
IkReal x437=((9.9999999995e-6)*cj3);
IkReal x438=((0.99999999995)*cj3);
IkReal x439=((9.9999999995e-6)*sj3);
IkReal x440=((0.999999288049747)*cj3);
IkReal x441=(sj3*x435);
IkReal x442=(new_r01*x435);
IkReal x443=(new_r11*x434);
IkReal x444=(new_r00*x435);
IkReal x445=((1.0)*x435);
IkReal x446=(new_r10*x434);
IkReal x447=(cj3*x434);
IkReal x448=(cj3*x435);
IkReal x449=(sj3*x434);
IkReal x450=(x436+x437);
evalcond[0]=((-3.06010217848752e-9)*x435);
evalcond[1]=((-3.06010217848752e-9)*x434);
evalcond[2]=((((3.06010217848752e-9)*x446))+(((3.06010217848752e-9)*x444)));
evalcond[3]=((((3.06010217848752e-9)*x442))+(((3.06010217848752e-9)*x443)));
evalcond[4]=((((-0.999999288049747)*sj3))+(((-9.99999288049746e-6)*cj3))+x444+x446);
evalcond[5]=(x440+x443+x442+(((-9.99999288049746e-6)*sj3)));
evalcond[6]=((((-1.0)*x438))+((new_r00*x434))+x439+(((-1.0)*new_r10*x445)));
evalcond[7]=(((new_r01*x434))+(((-1.0)*x450))+(((-1.0)*new_r11*x445)));
evalcond[8]=((((0.999999288099747)*x444))+(((0.999999288099747)*x446))+(((-1.0)*x450)));
evalcond[9]=((((-1.0)*x439))+(((0.999999288099747)*x443))+(((0.999999288099747)*x442))+x438);
evalcond[10]=(((x434*x439))+(((-1.0)*x434*x438))+(((-9.99999288049746e-6)*x448))+(((-0.999999288049747)*x441))+new_r00);
evalcond[11]=(((x435*x440))+(((-1.0)*x434*x437))+(((-1.0)*x434*x436))+(((-9.99999288049746e-6)*x441))+new_r01);
evalcond[12]=((((-1.0)*x435*x439))+(((-9.99999288049746e-6)*x447))+(((-0.999999288049747)*x449))+new_r10+((x435*x438)));
evalcond[13]=(((x434*x440))+(((-9.99999288049746e-6)*x449))+new_r11+((x435*x436))+((x435*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x451=((0.99999999995)*sj3);
IkReal x452=((9.9999999995e-6)*cj3);
CheckValue<IkReal> x453 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x452))+(((-1.0)*new_r10*x451)))),IkReal((((new_r00*x452))+((new_r00*x451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x454.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x453.value)+(((1.5707963267949)*(x454.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x455=IKcos(j5);
IkReal x456=IKsin(j5);
IkReal x457=((0.99999999995)*sj3);
IkReal x458=((9.9999999995e-6)*cj3);
IkReal x459=((0.99999999995)*cj3);
IkReal x460=((9.9999999995e-6)*sj3);
IkReal x461=((0.999999288049747)*cj3);
IkReal x462=(sj3*x456);
IkReal x463=(new_r01*x456);
IkReal x464=(new_r11*x455);
IkReal x465=(new_r00*x456);
IkReal x466=((1.0)*x456);
IkReal x467=(new_r10*x455);
IkReal x468=(cj3*x455);
IkReal x469=(cj3*x456);
IkReal x470=(sj3*x455);
IkReal x471=(x458+x457);
evalcond[0]=((-3.06010217848752e-9)*x456);
evalcond[1]=((-3.06010217848752e-9)*x455);
evalcond[2]=((((3.06010217848752e-9)*x465))+(((3.06010217848752e-9)*x467)));
evalcond[3]=((((3.06010217848752e-9)*x463))+(((3.06010217848752e-9)*x464)));
evalcond[4]=((((-0.999999288049747)*sj3))+(((-9.99999288049746e-6)*cj3))+x467+x465);
evalcond[5]=(x463+x461+x464+(((-9.99999288049746e-6)*sj3)));
evalcond[6]=(((new_r00*x455))+(((-1.0)*new_r10*x466))+(((-1.0)*x459))+x460);
evalcond[7]=(((new_r01*x455))+(((-1.0)*new_r11*x466))+(((-1.0)*x471)));
evalcond[8]=((((-1.0)*x471))+(((0.999999288099747)*x467))+(((0.999999288099747)*x465)));
evalcond[9]=((((-1.0)*x460))+x459+(((0.999999288099747)*x464))+(((0.999999288099747)*x463)));
evalcond[10]=(((x455*x460))+(((-9.99999288049746e-6)*x469))+(((-1.0)*x455*x459))+new_r00+(((-0.999999288049747)*x462)));
evalcond[11]=(((x456*x461))+(((-9.99999288049746e-6)*x462))+(((-1.0)*x455*x457))+(((-1.0)*x455*x458))+new_r01);
evalcond[12]=((((-0.999999288049747)*x470))+(((-1.0)*x456*x460))+(((-9.99999288049746e-6)*x468))+new_r10+((x456*x459)));
evalcond[13]=(((x455*x461))+(((-9.99999288049746e-6)*x470))+new_r11+((x456*x457))+((x456*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x472=((9.9999999995e-6)*sj3);
IkReal x473=((0.99999999995)*cj3);
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal((((new_r10*x472))+(((-1.0)*new_r10*x473)))),IkReal(((((-1.0)*new_r00*x472))+((new_r00*x473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
CheckValue<IkReal> x475=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x475.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x474.value)+(((1.5707963267949)*(x475.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x476=IKcos(j5);
IkReal x477=IKsin(j5);
IkReal x478=((0.99999999995)*sj3);
IkReal x479=((9.9999999995e-6)*cj3);
IkReal x480=((0.99999999995)*cj3);
IkReal x481=((9.9999999995e-6)*sj3);
IkReal x482=((0.999999288049747)*cj3);
IkReal x483=(sj3*x477);
IkReal x484=(new_r01*x477);
IkReal x485=(new_r11*x476);
IkReal x486=(new_r00*x477);
IkReal x487=((1.0)*x477);
IkReal x488=(new_r10*x476);
IkReal x489=(cj3*x476);
IkReal x490=(cj3*x477);
IkReal x491=(sj3*x476);
IkReal x492=(x478+x479);
evalcond[0]=((-3.06010217848752e-9)*x477);
evalcond[1]=((-3.06010217848752e-9)*x476);
evalcond[2]=((((3.06010217848752e-9)*x486))+(((3.06010217848752e-9)*x488)));
evalcond[3]=((((3.06010217848752e-9)*x484))+(((3.06010217848752e-9)*x485)));
evalcond[4]=((((-0.999999288049747)*sj3))+(((-9.99999288049746e-6)*cj3))+x488+x486);
evalcond[5]=(x482+x485+x484+(((-9.99999288049746e-6)*sj3)));
evalcond[6]=((((-1.0)*new_r10*x487))+(((-1.0)*x480))+((new_r00*x476))+x481);
evalcond[7]=((((-1.0)*new_r11*x487))+(((-1.0)*x492))+((new_r01*x476)));
evalcond[8]=((((-1.0)*x492))+(((0.999999288099747)*x488))+(((0.999999288099747)*x486)));
evalcond[9]=((((0.999999288099747)*x485))+(((0.999999288099747)*x484))+(((-1.0)*x481))+x480);
evalcond[10]=((((-1.0)*x476*x480))+((x476*x481))+(((-0.999999288049747)*x483))+new_r00+(((-9.99999288049746e-6)*x490)));
evalcond[11]=((((-1.0)*x476*x478))+(((-1.0)*x476*x479))+(((-9.99999288049746e-6)*x483))+new_r01+((x477*x482)));
evalcond[12]=((((-0.999999288049747)*x491))+(((-1.0)*x477*x481))+(((-9.99999288049746e-6)*x489))+new_r10+((x477*x480)));
evalcond[13]=(((x476*x482))+((x477*x478))+((x477*x479))+new_r11+(((-9.99999288049746e-6)*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x493=((0.00431000306829228)*cj4);
IkReal x494=((0.999990711893641)*sj4);
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal((((new_r11*x494))+((new_r11*x493)))),IkReal((((new_r01*x494))+((new_r01*x493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal x495=x496.value;
j5array[0]=((-1.0)*x495);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x495)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x497=IKsin(j5);
IkReal x498=IKcos(j5);
IkReal x499=((0.00431000306829228)*cj4*x498);
IkReal x500=((0.999990711893641)*sj4*x498);
IkReal x501=((0.999990711893641)*sj4*x497);
IkReal x502=((0.00431000306829228)*cj4*x497);
evalcond[0]=((((-1.0)*x502))+(((-1.0)*x501)));
evalcond[1]=((((-1.0)*x499))+(((-1.0)*x500)));
evalcond[2]=(((new_r10*x499))+((new_r10*x500))+((new_r00*x501))+((new_r00*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x503=((0.99999999995)*cj5);
IkReal x504=(new_r10*sj5);
IkReal x505=((9.9999999995e-6)*cj5);
IkReal x506=(new_r11*sj5);
if( IKabs(((((-0.99999999995)*x506))+(((-1.0)*new_r00*x505))+(((9.9999999995e-6)*x504))+((new_r01*x503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.99999999995)*x504))+((new_r00*x503))+((new_r01*x505))+(((-9.9999999995e-6)*x506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.99999999995)*x506))+(((-1.0)*new_r00*x505))+(((9.9999999995e-6)*x504))+((new_r01*x503))))+IKsqr(((((-0.99999999995)*x504))+((new_r00*x503))+((new_r01*x505))+(((-9.9999999995e-6)*x506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-0.99999999995)*x506))+(((-1.0)*new_r00*x505))+(((9.9999999995e-6)*x504))+((new_r01*x503))), ((((-0.99999999995)*x504))+((new_r00*x503))+((new_r01*x505))+(((-9.9999999995e-6)*x506))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x507=IKcos(j3);
IkReal x508=IKsin(j3);
IkReal x509=(cj5*sj4);
IkReal x510=(new_r01*sj5);
IkReal x511=((1.0)*sj5);
IkReal x512=(new_r00*sj5);
IkReal x513=((232.018396299245)*sj5);
IkReal x514=((232.018396310846)*sj4);
IkReal x515=((9.9999999995e-6)*x507);
IkReal x516=((0.99999999995)*x508);
IkReal x517=((0.99999999995)*x507);
IkReal x518=((9.9999999995e-6)*x508);
IkReal x519=(sj4*x508);
IkReal x520=((0.00232018396299245)*x507);
IkReal x521=(cj4*x507);
IkReal x522=(sj4*x507);
IkReal x523=(cj4*x508);
IkReal x524=(x516+x515);
evalcond[0]=((((-1.0)*new_r10*x511))+((cj5*new_r00))+x518+(((-1.0)*x517)));
evalcond[1]=((((-1.0)*new_r11*x511))+((cj5*new_r01))+(((-1.0)*x524)));
evalcond[2]=(((cj5*new_r10))+(((232.018396299245)*x519))+x512+((sj4*x520)));
evalcond[3]=((((0.00232018396299245)*x519))+((cj5*new_r11))+(((-232.018396299245)*x522))+x510);
evalcond[4]=((((-1.0)*x524))+(((-1.0)*x512*x514))+(((-232.018396310846)*new_r10*x509)));
evalcond[5]=(x517+(((-232.018396310846)*new_r11*x509))+(((-1.0)*x518))+(((-1.0)*x510*x514)));
evalcond[6]=((((-4.31000306807678e-8)*x521))+(((-0.999990711843642)*x519))+(((-9.99990711843642e-6)*x522))+(((-0.00431000306807678)*x523)));
evalcond[7]=((((0.999990711843642)*x522))+(((-4.31000306807678e-8)*x523))+(((0.00431000306807678)*x521))+(((-9.99990711843642e-6)*x519)));
evalcond[8]=(((cj5*x518))+((sj4*sj5*x520))+((x513*x519))+(((-1.0)*cj5*x517))+new_r00);
evalcond[9]=((((0.00232018396299245)*sj5*x519))+(((-1.0)*cj5*x515))+(((-1.0)*cj5*x516))+(((-1.0)*x513*x522))+new_r01);
evalcond[10]=((((-1.0)*sj5*x518))+((x509*x520))+((sj5*x517))+new_r10+(((232.018396299245)*x508*x509)));
evalcond[11]=(((sj5*x515))+((sj5*x516))+(((-232.018396299245)*x507*x509))+(((0.00232018396299245)*x508*x509))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x525=((0.999990711893641)*sj4);
IkReal x526=((0.00431000306829228)*cj4);
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal((((new_r10*x525))+((new_r10*x526)))),IkReal((((new_r00*x526))+((new_r00*x525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
IkReal x527=x528.value;
j5array[0]=((-1.0)*x527);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x527)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x529=IKsin(j5);
IkReal x530=IKcos(j5);
IkReal x531=((0.999990711893641)*sj4);
IkReal x532=((0.00431000306829228)*cj4);
IkReal x533=(new_r01*x529);
IkReal x534=(x530*x532);
evalcond[0]=((((-1.0)*x529*x532))+(((-1.0)*x529*x531)));
evalcond[1]=((((-1.0)*x530*x531))+(((-1.0)*x534)));
evalcond[2]=(((new_r11*x534))+((x531*x533))+((new_r11*x530*x531))+((x532*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x535=((0.99999999995)*cj5);
IkReal x536=(new_r10*sj5);
IkReal x537=((9.9999999995e-6)*cj5);
IkReal x538=(new_r11*sj5);
if( IKabs((((new_r01*x535))+(((-1.0)*new_r00*x537))+(((-0.99999999995)*x538))+(((9.9999999995e-6)*x536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x537))+(((-9.9999999995e-6)*x538))+(((-0.99999999995)*x536))+((new_r00*x535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*x535))+(((-1.0)*new_r00*x537))+(((-0.99999999995)*x538))+(((9.9999999995e-6)*x536))))+IKsqr((((new_r01*x537))+(((-9.9999999995e-6)*x538))+(((-0.99999999995)*x536))+((new_r00*x535))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((new_r01*x535))+(((-1.0)*new_r00*x537))+(((-0.99999999995)*x538))+(((9.9999999995e-6)*x536))), (((new_r01*x537))+(((-9.9999999995e-6)*x538))+(((-0.99999999995)*x536))+((new_r00*x535))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x539=IKcos(j3);
IkReal x540=IKsin(j3);
IkReal x541=(cj5*sj4);
IkReal x542=(new_r01*sj5);
IkReal x543=((1.0)*sj5);
IkReal x544=(new_r00*sj5);
IkReal x545=((232.018396299245)*sj5);
IkReal x546=((232.018396310846)*sj4);
IkReal x547=((9.9999999995e-6)*x539);
IkReal x548=((0.99999999995)*x540);
IkReal x549=((0.99999999995)*x539);
IkReal x550=((9.9999999995e-6)*x540);
IkReal x551=(sj4*x540);
IkReal x552=((0.00232018396299245)*x539);
IkReal x553=(cj4*x539);
IkReal x554=(sj4*x539);
IkReal x555=(cj4*x540);
IkReal x556=(x547+x548);
evalcond[0]=(((cj5*new_r00))+(((-1.0)*new_r10*x543))+(((-1.0)*x549))+x550);
evalcond[1]=(((cj5*new_r01))+(((-1.0)*new_r11*x543))+(((-1.0)*x556)));
evalcond[2]=(((sj4*x552))+((cj5*new_r10))+x544+(((232.018396299245)*x551)));
evalcond[3]=(((cj5*new_r11))+(((0.00232018396299245)*x551))+(((-232.018396299245)*x554))+x542);
evalcond[4]=((((-232.018396310846)*new_r10*x541))+(((-1.0)*x544*x546))+(((-1.0)*x556)));
evalcond[5]=((((-1.0)*x542*x546))+(((-232.018396310846)*new_r11*x541))+(((-1.0)*x550))+x549);
evalcond[6]=((((-4.31000306807678e-8)*x553))+(((-9.99990711843642e-6)*x554))+(((-0.999990711843642)*x551))+(((-0.00431000306807678)*x555)));
evalcond[7]=((((-4.31000306807678e-8)*x555))+(((0.00431000306807678)*x553))+(((-9.99990711843642e-6)*x551))+(((0.999990711843642)*x554)));
evalcond[8]=(((sj4*sj5*x552))+((cj5*x550))+new_r00+(((-1.0)*cj5*x549))+((x545*x551)));
evalcond[9]=((((-1.0)*x545*x554))+(((0.00232018396299245)*sj5*x551))+new_r01+(((-1.0)*cj5*x547))+(((-1.0)*cj5*x548)));
evalcond[10]=(((x541*x552))+(((-1.0)*sj5*x550))+(((232.018396299245)*x540*x541))+((sj5*x549))+new_r10);
evalcond[11]=((((0.00232018396299245)*x540*x541))+((sj5*x548))+((sj5*x547))+new_r11+(((-232.018396299245)*x539*x541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(((((-9.99990711843642e-6)*sj4))+(((-4.31000306807678e-8)*cj4)))),IkReal(((((-0.999990711843642)*sj4))+(((-0.00431000306807678)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
IkReal x557=x558.value;
j3array[0]=((-1.0)*x557);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x557)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x559=IKcos(j3);
IkReal x560=IKsin(j3);
evalcond[0]=((((-4.31000306807678e-8)*cj4*x560))+(((0.00431000306807678)*cj4*x559))+(((-9.99990711843642e-6)*sj4*x560))+(((0.999990711843642)*sj4*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x561=((10000000000.5)*sj3);
IkReal x562=((100000.000005)*cj3);
IkReal x563=((100000.000005)*sj3);
IkReal x564=((10000000000.5)*cj3);
IkReal x565=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j5eval[0]=x565;
j5eval[1]=((IKabs((((new_r11*x564))+(((-1.0)*new_r11*x563))+(((-1.0)*new_r10*x562))+(((-1.0)*new_r10*x561)))))+(IKabs(((((-1.0)*new_r00*x561))+(((-1.0)*new_r00*x562))+((new_r01*x564))+(((-1.0)*new_r01*x563))))));
j5eval[2]=IKsign(x565);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=1.0;
j5eval[1]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x566=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x566;
j5eval[1]=IKsign(x566);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x567=((0.99999999995)*cj3);
IkReal x568=((9.9999999995e-6)*sj3);
IkReal x569=((0.00232018396299245)*sj3*sj4);
IkReal x570=((232.018396299245)*cj3*sj4);
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x569))+((new_r00*x570))+((new_r11*x568))+(((-1.0)*new_r11*x567)))),IkReal((((new_r10*x570))+((new_r01*x567))+(((-1.0)*new_r10*x569))+(((-1.0)*new_r01*x568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x572.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x571.value)+(((1.5707963267949)*(x572.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x573=IKsin(j5);
IkReal x574=IKcos(j5);
IkReal x575=((0.99999999995)*sj3);
IkReal x576=((9.9999999995e-6)*cj3);
IkReal x577=((0.99999999995)*cj3);
IkReal x578=((9.9999999995e-6)*sj3);
IkReal x579=((0.00232018396299245)*cj3);
IkReal x580=((0.999990711893641)*sj4);
IkReal x581=((0.00431000306829228)*cj4);
IkReal x582=(sj3*sj4);
IkReal x583=(cj3*sj4);
IkReal x584=((232.018396310846)*sj4);
IkReal x585=(sj4*x573);
IkReal x586=(sj3*x573);
IkReal x587=(new_r01*x573);
IkReal x588=((1.0)*x573);
IkReal x589=(new_r11*x574);
IkReal x590=(new_r10*x574);
IkReal x591=((232.018396299245)*x574);
IkReal x592=(new_r00*x573);
IkReal x593=(x575+x576);
evalcond[0]=((((-1.0)*x573*x581))+(((-1.0)*x573*x580)));
evalcond[1]=((((-1.0)*x574*x580))+(((-1.0)*x574*x581)));
evalcond[2]=(((new_r00*x574))+(((-1.0)*x577))+x578+(((-1.0)*new_r10*x588)));
evalcond[3]=(((new_r01*x574))+(((-1.0)*x593))+(((-1.0)*new_r11*x588)));
evalcond[4]=(((sj4*x579))+(((232.018396299245)*x582))+x592+x590);
evalcond[5]=((((0.00232018396299245)*x582))+x587+x589+(((-232.018396299245)*x583)));
evalcond[6]=((((-1.0)*x593))+(((-1.0)*x584*x590))+(((-1.0)*x584*x592)));
evalcond[7]=((((-1.0)*x584*x589))+(((-1.0)*x584*x587))+(((-1.0)*x578))+x577);
evalcond[8]=(((x579*x585))+(((232.018396299245)*x573*x582))+((x574*x578))+(((-1.0)*x574*x577))+new_r00);
evalcond[9]=((((-232.018396299245)*x573*x583))+(((-1.0)*x574*x575))+(((-1.0)*x574*x576))+(((0.00232018396299245)*x573*x582))+new_r01);
evalcond[10]=(((sj4*x574*x579))+(((-1.0)*x573*x578))+((x573*x577))+((x582*x591))+new_r10);
evalcond[11]=(((x573*x575))+((x573*x576))+(((-1.0)*x583*x591))+new_r11+(((0.00232018396299245)*x574*x582)));
evalcond[12]=(((x581*x592))+((x581*x590))+((x580*x592))+((x580*x590)));
evalcond[13]=(((x581*x587))+((x581*x589))+((x580*x587))+((x580*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x594=(new_r10*sj3);
IkReal x595=((232.018396299245)*sj4);
IkReal x596=((0.99999999995)*cj3);
IkReal x597=(new_r00*sj3);
IkReal x598=((0.00232018396299245)*cj3*sj4);
CheckValue<IkReal> x599=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600 = IKatan2WithCheck(IkReal(((((9.9999999995e-6)*x594))+(((-1.0)*new_r00*x598))+(((-1.0)*new_r10*x596))+(((-1.0)*x595*x597)))),IkReal(((((-1.0)*new_r10*x598))+((new_r00*x596))+(((-9.9999999995e-6)*x597))+(((-1.0)*x594*x595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x600.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x599.value)))+(x600.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x601=IKsin(j5);
IkReal x602=IKcos(j5);
IkReal x603=((0.99999999995)*sj3);
IkReal x604=((9.9999999995e-6)*cj3);
IkReal x605=((0.99999999995)*cj3);
IkReal x606=((9.9999999995e-6)*sj3);
IkReal x607=((0.00232018396299245)*cj3);
IkReal x608=((0.999990711893641)*sj4);
IkReal x609=((0.00431000306829228)*cj4);
IkReal x610=(sj3*sj4);
IkReal x611=(cj3*sj4);
IkReal x612=((232.018396310846)*sj4);
IkReal x613=(sj4*x601);
IkReal x614=(sj3*x601);
IkReal x615=(new_r01*x601);
IkReal x616=((1.0)*x601);
IkReal x617=(new_r11*x602);
IkReal x618=(new_r10*x602);
IkReal x619=((232.018396299245)*x602);
IkReal x620=(new_r00*x601);
IkReal x621=(x603+x604);
evalcond[0]=((((-1.0)*x601*x608))+(((-1.0)*x601*x609)));
evalcond[1]=((((-1.0)*x602*x609))+(((-1.0)*x602*x608)));
evalcond[2]=((((-1.0)*new_r10*x616))+x606+((new_r00*x602))+(((-1.0)*x605)));
evalcond[3]=((((-1.0)*x621))+(((-1.0)*new_r11*x616))+((new_r01*x602)));
evalcond[4]=(((sj4*x607))+x618+x620+(((232.018396299245)*x610)));
evalcond[5]=((((0.00232018396299245)*x610))+(((-232.018396299245)*x611))+x615+x617);
evalcond[6]=((((-1.0)*x612*x618))+(((-1.0)*x621))+(((-1.0)*x612*x620)));
evalcond[7]=((((-1.0)*x612*x615))+(((-1.0)*x612*x617))+x605+(((-1.0)*x606)));
evalcond[8]=((((-1.0)*x602*x605))+(((232.018396299245)*x601*x610))+((x607*x613))+((x602*x606))+new_r00);
evalcond[9]=((((-1.0)*x602*x603))+(((-1.0)*x602*x604))+(((-232.018396299245)*x601*x611))+(((0.00232018396299245)*x601*x610))+new_r01);
evalcond[10]=(((x601*x605))+new_r10+((sj4*x602*x607))+((x610*x619))+(((-1.0)*x601*x606)));
evalcond[11]=(((x601*x604))+((x601*x603))+(((-1.0)*x611*x619))+new_r11+(((0.00232018396299245)*x602*x610)));
evalcond[12]=(((x608*x618))+((x609*x620))+((x608*x620))+((x609*x618)));
evalcond[13]=(((x608*x615))+((x608*x617))+((x609*x615))+((x609*x617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x622=((0.99999999995)*cj3);
IkReal x623=((9.9999999995e-6)*sj3);
IkReal x624=((9.9999999995e-6)*cj3);
IkReal x625=((0.99999999995)*sj3);
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x623))+(((-1.0)*new_r00*x624))+(((-1.0)*new_r00*x625))+((new_r01*x622)))),IkReal((((new_r11*x622))+(((-1.0)*new_r11*x623))+(((-1.0)*new_r10*x625))+(((-1.0)*new_r10*x624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x627.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x626.value)+(((1.5707963267949)*(x627.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x628=IKsin(j5);
IkReal x629=IKcos(j5);
IkReal x630=((0.99999999995)*sj3);
IkReal x631=((9.9999999995e-6)*cj3);
IkReal x632=((0.99999999995)*cj3);
IkReal x633=((9.9999999995e-6)*sj3);
IkReal x634=((0.00232018396299245)*cj3);
IkReal x635=((0.999990711893641)*sj4);
IkReal x636=((0.00431000306829228)*cj4);
IkReal x637=(sj3*sj4);
IkReal x638=(cj3*sj4);
IkReal x639=((232.018396310846)*sj4);
IkReal x640=(sj4*x628);
IkReal x641=(sj3*x628);
IkReal x642=(new_r01*x628);
IkReal x643=((1.0)*x628);
IkReal x644=(new_r11*x629);
IkReal x645=(new_r10*x629);
IkReal x646=((232.018396299245)*x629);
IkReal x647=(new_r00*x628);
IkReal x648=(x630+x631);
evalcond[0]=((((-1.0)*x628*x635))+(((-1.0)*x628*x636)));
evalcond[1]=((((-1.0)*x629*x636))+(((-1.0)*x629*x635)));
evalcond[2]=((((-1.0)*new_r10*x643))+(((-1.0)*x632))+((new_r00*x629))+x633);
evalcond[3]=((((-1.0)*new_r11*x643))+((new_r01*x629))+(((-1.0)*x648)));
evalcond[4]=(((sj4*x634))+(((232.018396299245)*x637))+x647+x645);
evalcond[5]=((((0.00232018396299245)*x637))+x644+x642+(((-232.018396299245)*x638)));
evalcond[6]=((((-1.0)*x639*x645))+(((-1.0)*x639*x647))+(((-1.0)*x648)));
evalcond[7]=((((-1.0)*x639*x644))+(((-1.0)*x639*x642))+(((-1.0)*x633))+x632);
evalcond[8]=((((-1.0)*x629*x632))+((x629*x633))+(((232.018396299245)*x628*x637))+((x634*x640))+new_r00);
evalcond[9]=((((-1.0)*x629*x631))+(((-1.0)*x629*x630))+(((-232.018396299245)*x628*x638))+(((0.00232018396299245)*x628*x637))+new_r01);
evalcond[10]=(((x628*x632))+(((-1.0)*x628*x633))+((x637*x646))+((sj4*x629*x634))+new_r10);
evalcond[11]=(((x628*x631))+((x628*x630))+(((0.00232018396299245)*x629*x637))+new_r11+(((-1.0)*x638*x646)));
evalcond[12]=(((x635*x647))+((x635*x645))+((x636*x645))+((x636*x647)));
evalcond[13]=(((x635*x642))+((x635*x644))+((x636*x644))+((x636*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x649=((0.999990711843642)*sj4);
IkReal x650=(cj4*new_r20);
IkReal x651=((9.99990711843642e-6)*sj4);
IkReal x652=(cj4*new_r21);
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(((0.999981423873551)+(((0.00861992607305074)*cj4*sj4))+(((-0.999962847747103)*(cj4*cj4))))),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal((((new_r20*x649))+(((0.00431000306807678)*x650))+((new_r21*x651))+(((4.31000306807678e-8)*x652)))),IkReal(((((-0.00431000306807678)*x652))+(((-1.0)*new_r21*x649))+((new_r20*x651))+(((4.31000306807678e-8)*x650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x653.value)))+(x654.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x655=IKsin(j3);
IkReal x656=IKcos(j3);
IkReal x657=((0.999990711843642)*sj4);
IkReal x658=((9.99990711843642e-6)*sj4);
IkReal x659=((0.00431000306807678)*cj4);
IkReal x660=((4.31000306807678e-8)*cj4);
evalcond[0]=((((-1.0)*x655*x659))+(((-1.0)*x655*x657))+(((-1.0)*x656*x658))+(((-1.0)*x656*x660))+new_r20);
evalcond[1]=((((-1.0)*x655*x658))+((x656*x657))+((x656*x659))+(((-1.0)*x655*x660))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=((((-232.016241299304)*sj4))+(((-1.0)*cj4)));
j5eval[1]=IKsign(((((-0.999990711893641)*sj4))+(((-0.00431000306829228)*cj4))));
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x661=((100000.000005)*sj3);
IkReal x662=((10000000000.5)*cj3);
IkReal x663=((((-1.0)*new_r00*new_r12))+((new_r02*new_r10)));
j5eval[0]=x663;
j5eval[1]=((IKabs(((((-1.0)*new_r02*x662))+((new_r02*x661)))))+(IKabs((((new_r12*x661))+(((-1.0)*new_r12*x662))))));
j5eval[2]=IKsign(x663);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x664=((43099969.3170991)*cj4);
IkReal x665=((9999892881.06866)*sj4);
IkReal x666=((((-1.0)*(new_r02*new_r02)))+(((-1.0)*(new_r12*new_r12))));
j5eval[0]=x666;
j5eval[1]=((IKabs(((((-1.0)*new_r12*x665))+(((-1.0)*new_r12*x664)))))+(IKabs(((((-1.0)*new_r02*x664))+(((-1.0)*new_r02*x665))))));
j5eval[2]=IKsign(x666);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.13728263717753)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-326786473.677248)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-326786473.677248)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-326786473.677248)*new_r02))+IKsqr(((-326786473.677248)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-326786473.677248)*new_r02), ((-326786473.677248)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x667=IKcos(j5);
IkReal x668=IKsin(j5);
IkReal x669=((326786473.677248)*new_r20);
IkReal x670=((99999.9998143152)*sj3);
IkReal x671=((100000.000005)*sj3);
IkReal x672=(sj3*x668);
IkReal x673=(new_r01*x668);
IkReal x674=(new_r11*x667);
IkReal x675=(new_r00*x668);
IkReal x676=((1.0)*x668);
IkReal x677=(new_r20*x667);
IkReal x678=(new_r12*x667);
IkReal x679=(new_r02*x668);
IkReal x680=((3.06010217848752e-9)*x667);
IkReal x681=(new_r10*x667);
IkReal x682=(new_r20*x668);
evalcond[0]=((((3.06010217848752e-9)*x668))+new_r02);
evalcond[1]=(x680+new_r12);
evalcond[2]=(((new_r02*x667))+(((-1.0)*new_r12*x676)));
evalcond[3]=(x675+x681+(((-326786473.054116)*new_r20)));
evalcond[4]=((3.06010217848752e-9)+x678+x679);
evalcond[5]=(x669+(((-1.0)*new_r11*x676))+((new_r01*x667)));
evalcond[6]=((((32678647305411.6)*new_r20))+x673+x670+x674);
evalcond[7]=((-3.06010217265237e-9)+(((-0.999999998093152)*x678))+(((-0.999999998093152)*x679)));
evalcond[8]=((-3.81369590936423e-9)+(((-3.06010217848752e-9)*x679))+(((-3.06010217848752e-9)*x678)));
evalcond[9]=((((32678647367724.8)*new_r20))+x671+((new_r00*x667))+(((-1.0)*new_r10*x676)));
evalcond[10]=((((-1.0)*new_r10*x680))+(((-3.06010217848752e-9)*x675))+(((0.999999998093152)*new_r20)));
evalcond[11]=((((-3.06010217848752e-9)*x673))+(((-3.06010217848752e-9)*x674))+(((0.999999998093152)*new_r21)));
evalcond[12]=((((32678647367724.8)*x677))+(((-326786473.054116)*x682))+((x667*x671))+new_r00);
evalcond[13]=((((-0.999999998093152)*x681))+x669+(((-0.999999998093152)*x675)));
evalcond[14]=(((x667*x669))+(((32678647305411.6)*x682))+((x668*x670))+new_r01);
evalcond[15]=((((-326786473.054116)*x677))+(((-1.0)*x668*x671))+(((-32678647367724.8)*x682))+new_r10);
evalcond[16]=(((x667*x670))+(((-1.0)*x668*x669))+(((32678647305411.6)*x677))+new_r11);
evalcond[17]=((((0.99999999995)*cj3))+(((-3.06010217848752e-9)*new_r21))+(((-9.9999999995e-6)*sj3))+(((-0.999999998093152)*x674))+(((-0.999999998093152)*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.27887529076732)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((326786473.677248)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((326786473.677248)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((326786473.677248)*new_r02))+IKsqr(((326786473.677248)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((326786473.677248)*new_r02), ((326786473.677248)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x683=IKcos(j5);
IkReal x684=IKsin(j5);
IkReal x685=((326786473.677248)*new_r20);
IkReal x686=((99999.9998143152)*sj3);
IkReal x687=((100000.000005)*sj3);
IkReal x688=(sj3*x684);
IkReal x689=(new_r01*x684);
IkReal x690=(new_r11*x683);
IkReal x691=(new_r00*x684);
IkReal x692=((1.0)*x684);
IkReal x693=(new_r20*x683);
IkReal x694=(new_r12*x683);
IkReal x695=(new_r02*x684);
IkReal x696=((3.06010217848752e-9)*x683);
IkReal x697=(new_r10*x683);
IkReal x698=(new_r20*x684);
evalcond[0]=((((-3.06010217848752e-9)*x684))+new_r02);
evalcond[1]=((((-1.0)*x696))+new_r12);
evalcond[2]=(((new_r02*x683))+(((-1.0)*new_r12*x692)));
evalcond[3]=(x697+x691+(((-326786473.054116)*new_r20)));
evalcond[4]=((-3.06010217848752e-9)+x694+x695);
evalcond[5]=((((-1.0)*x685))+(((-1.0)*new_r11*x692))+((new_r01*x683)));
evalcond[6]=((((32678647305411.6)*new_r20))+(((-1.0)*x686))+x689+x690);
evalcond[7]=((-3.06010217265237e-9)+(((0.999999998093152)*x694))+(((0.999999998093152)*x695)));
evalcond[8]=((-3.81369590936423e-9)+(((3.06010217848752e-9)*x695))+(((3.06010217848752e-9)*x694)));
evalcond[9]=((((-32678647367724.8)*new_r20))+(((-1.0)*new_r10*x692))+((new_r00*x683))+x687);
evalcond[10]=((((3.06010217848752e-9)*x691))+(((-0.999999998093152)*new_r20))+((new_r10*x696)));
evalcond[11]=((((3.06010217848752e-9)*x689))+(((3.06010217848752e-9)*x690))+(((-0.999999998093152)*new_r21)));
evalcond[12]=(((x683*x687))+(((-326786473.054116)*x698))+(((-32678647367724.8)*x693))+new_r00);
evalcond[13]=((((0.999999998093152)*x697))+(((0.999999998093152)*x691))+(((-1.0)*x685)));
evalcond[14]=((((32678647305411.6)*x698))+(((-1.0)*x684*x686))+(((-1.0)*x683*x685))+new_r01);
evalcond[15]=((((-1.0)*x684*x687))+(((-326786473.054116)*x693))+(((32678647367724.8)*x698))+new_r10);
evalcond[16]=((((32678647305411.6)*x693))+(((-1.0)*x683*x686))+new_r11+((x684*x685)));
evalcond[17]=((((0.999999998093152)*x690))+(((0.999999998093152)*x689))+(((3.06010217848752e-9)*new_r21))+(((0.99999999995)*cj3))+(((-9.9999999995e-6)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=sj3;
j5eval[1]=IKsign(sj3);
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=new_r11;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r01;
evalcond[3]=new_r10;
evalcond[4]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=IKabs(cj4);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=cj4;
op[1]=0;
op[2]=((-1.0)*cj4);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r01;
evalcond[3]=new_r10;
evalcond[4]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=IKabs(cj4);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=cj4;
op[1]=0;
op[2]=((-1.0)*cj4);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x701=IKPowWithIntegerCheck(sj3,-1);
if(!x701.valid){
continue;
}
IkReal x699=x701.value;
IkReal x700=((-9.9999999995e-6)*new_r00*x699);
CheckValue<IkReal> x702=IKPowWithIntegerCheck(new_r11,-1);
if(!x702.valid){
continue;
}
if( IKabs((new_r01*x700*(x702.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x700) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*x700*(x702.value)))+IKsqr(x700)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r01*x700*(x702.value)), x700);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x703=IKcos(j5);
IkReal x704=IKsin(j5);
IkReal x705=((100000.000005)*sj3);
IkReal x706=((0.999990711893641)*sj4);
IkReal x707=((0.00431000306829228)*cj4);
IkReal x708=((232.018396310846)*sj4);
IkReal x709=(new_r10*x703);
IkReal x710=(new_r01*x704);
IkReal x711=((1.0)*x704);
IkReal x712=(new_r11*x703);
IkReal x713=((23201839.6322447)*sj3*sj4);
IkReal x714=(new_r00*x704);
evalcond[0]=(((x703*x705))+new_r00);
evalcond[1]=(x714+x709);
evalcond[2]=((((-1.0)*x704*x705))+new_r10);
evalcond[3]=(((new_r01*x703))+(((-1.0)*new_r11*x711)));
evalcond[4]=(((x704*x713))+new_r01);
evalcond[5]=(((x703*x713))+new_r11);
evalcond[6]=(((new_r00*x703))+x705+(((-1.0)*new_r10*x711)));
evalcond[7]=(x710+x713+x712);
evalcond[8]=((((-1.0)*x704*x706))+(((-1.0)*x704*x707)));
evalcond[9]=((((-1.0)*x703*x706))+(((-1.0)*x703*x707)));
evalcond[10]=((((-1.0)*x708*x714))+(((-1.0)*x708*x709)));
evalcond[11]=((((-1.0)*x705))+(((-1.0)*x708*x712))+(((-1.0)*x708*x710)));
evalcond[12]=(((x706*x709))+((x707*x709))+((x707*x714))+((x706*x714)));
evalcond[13]=(((x707*x710))+((x707*x712))+((x706*x710))+((x706*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x715=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716 = IKatan2WithCheck(IkReal(((100000.000005)*new_r10)),IkReal(((-100000.000005)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x716.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x715.value)))+(x716.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x717=IKcos(j5);
IkReal x718=IKsin(j5);
IkReal x719=((100000.000005)*sj3);
IkReal x720=((0.999990711893641)*sj4);
IkReal x721=((0.00431000306829228)*cj4);
IkReal x722=((232.018396310846)*sj4);
IkReal x723=(new_r10*x717);
IkReal x724=(new_r01*x718);
IkReal x725=((1.0)*x718);
IkReal x726=(new_r11*x717);
IkReal x727=((23201839.6322447)*sj3*sj4);
IkReal x728=(new_r00*x718);
evalcond[0]=(((x717*x719))+new_r00);
evalcond[1]=(x723+x728);
evalcond[2]=((((-1.0)*x718*x719))+new_r10);
evalcond[3]=(((new_r01*x717))+(((-1.0)*new_r11*x725)));
evalcond[4]=(((x718*x727))+new_r01);
evalcond[5]=(((x717*x727))+new_r11);
evalcond[6]=(((new_r00*x717))+x719+(((-1.0)*new_r10*x725)));
evalcond[7]=(x724+x726+x727);
evalcond[8]=((((-1.0)*x718*x720))+(((-1.0)*x718*x721)));
evalcond[9]=((((-1.0)*x717*x720))+(((-1.0)*x717*x721)));
evalcond[10]=((((-1.0)*x722*x723))+(((-1.0)*x722*x728)));
evalcond[11]=((((-1.0)*x722*x724))+(((-1.0)*x722*x726))+(((-1.0)*x719)));
evalcond[12]=(((x721*x723))+((x721*x728))+((x720*x723))+((x720*x728)));
evalcond[13]=(((x721*x724))+((x721*x726))+((x720*x724))+((x720*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x729=((0.00431000306829228)*cj4);
IkReal x730=((0.999990711893641)*sj4);
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(((((-1.0)*new_r02*x729))+(((-1.0)*new_r02*x730)))),IkReal(((((-1.0)*new_r12*x730))+(((-1.0)*new_r12*x729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r02*new_r02)))+(((-1.0)*(new_r12*new_r12))))),-1);
if(!x732.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x731.value)+(((1.5707963267949)*(x732.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x733=IKsin(j5);
IkReal x734=IKcos(j5);
IkReal x735=((0.99999999995)*sj3);
IkReal x736=((9.9999999995e-6)*cj3);
IkReal x737=((0.99999999995)*cj3);
IkReal x738=((9.9999999995e-6)*sj3);
IkReal x739=((0.999990711893641)*cj4);
IkReal x740=((9.99990711843642e-6)*sj3);
IkReal x741=((0.00431000306829228)*cj4);
IkReal x742=((4.31000306807678e-8)*sj3);
IkReal x743=((0.999990711843642)*cj3);
IkReal x744=((0.00431000306829228)*sj4);
IkReal x745=((0.999990711843642)*sj3);
IkReal x746=((9.99990711843642e-6)*cj3);
IkReal x747=((0.00431000306807678)*sj3);
IkReal x748=((0.00431000306807678)*cj3);
IkReal x749=((0.999990711893641)*sj4);
IkReal x750=((4.31000306807678e-8)*cj3);
IkReal x751=(new_r02*x733);
IkReal x752=(cj4*x734);
IkReal x753=((1.0)*x733);
IkReal x754=(new_r10*x734);
IkReal x755=(new_r12*x734);
IkReal x756=(sj4*x733);
IkReal x757=(new_r11*x734);
IkReal x758=(cj4*x733);
IkReal x759=(sj4*x734);
IkReal x760=(new_r01*x733);
IkReal x761=(new_r00*x733);
IkReal x762=(x736+x735);
evalcond[0]=(((new_r02*x734))+(((-1.0)*new_r12*x753)));
evalcond[1]=((((-1.0)*x733*x749))+(((-1.0)*x733*x741))+new_r02);
evalcond[2]=((((-1.0)*x734*x749))+(((-1.0)*x734*x741))+new_r12);
evalcond[3]=(x755+x751+(((-1.0)*x749))+(((-1.0)*x741)));
evalcond[4]=(((new_r00*x734))+(((-1.0)*new_r10*x753))+(((-1.0)*x737))+x738);
evalcond[5]=(((new_r01*x734))+(((-1.0)*x762))+(((-1.0)*new_r11*x753)));
evalcond[6]=(((sj4*x747))+((sj4*x750))+(((-1.0)*cj4*x745))+(((-1.0)*cj4*x746))+x754+x761);
evalcond[7]=(((sj4*x742))+(((-1.0)*sj4*x748))+(((-1.0)*cj4*x740))+x757+x760+((cj4*x743)));
evalcond[8]=(((x739*x755))+((x739*x751))+((new_r22*x741))+((new_r22*x749))+(((-1.0)*x744*x751))+(((-1.0)*x744*x755)));
evalcond[9]=((((-1.0)*new_r20*x739))+((x741*x761))+((x741*x754))+((new_r20*x744))+((x749*x754))+((x749*x761)));
evalcond[10]=((((-1.0)*new_r21*x739))+((x741*x760))+((x741*x757))+((x749*x757))+((new_r21*x744))+((x749*x760)));
evalcond[11]=((-1.0)+(((-1.0)*new_r22*x739))+((new_r22*x744))+((x741*x751))+((x741*x755))+((x749*x751))+((x749*x755)));
evalcond[12]=((((-1.0)*x745*x758))+((x747*x756))+((x734*x738))+(((-1.0)*x734*x737))+(((-1.0)*x746*x758))+new_r00+((x750*x756)));
evalcond[13]=((((-1.0)*x734*x736))+(((-1.0)*x734*x735))+((x743*x758))+new_r01+(((-1.0)*x748*x756))+((x742*x756))+(((-1.0)*x740*x758)));
evalcond[14]=((((-1.0)*x745*x752))+((x747*x759))+(((-1.0)*x733*x738))+(((-1.0)*x746*x752))+((x733*x737))+new_r10+((x750*x759)));
evalcond[15]=(((x743*x752))+((x733*x736))+((x733*x735))+new_r11+(((-1.0)*x748*x759))+((x742*x759))+(((-1.0)*x740*x752)));
evalcond[16]=(((x739*x761))+((x739*x754))+(((-1.0)*x762))+(((-1.0)*x744*x761))+(((-1.0)*x744*x754))+((new_r20*x741))+((new_r20*x749)));
evalcond[17]=(((x739*x760))+((x739*x757))+(((-1.0)*x744*x760))+(((-1.0)*x738))+(((-1.0)*x744*x757))+x737+((new_r21*x749))+((new_r21*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x763=((9.9999999995e-6)*sj3);
IkReal x764=((0.99999999995)*cj3);
CheckValue<IkReal> x765=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r12))+((new_r02*new_r10)))),-1);
if(!x765.valid){
continue;
}
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal((((new_r02*x763))+(((-1.0)*new_r02*x764)))),IkReal((((new_r12*x763))+(((-1.0)*new_r12*x764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x765.value)))+(x766.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x767=IKsin(j5);
IkReal x768=IKcos(j5);
IkReal x769=((0.99999999995)*sj3);
IkReal x770=((9.9999999995e-6)*cj3);
IkReal x771=((0.99999999995)*cj3);
IkReal x772=((9.9999999995e-6)*sj3);
IkReal x773=((0.999990711893641)*cj4);
IkReal x774=((9.99990711843642e-6)*sj3);
IkReal x775=((0.00431000306829228)*cj4);
IkReal x776=((4.31000306807678e-8)*sj3);
IkReal x777=((0.999990711843642)*cj3);
IkReal x778=((0.00431000306829228)*sj4);
IkReal x779=((0.999990711843642)*sj3);
IkReal x780=((9.99990711843642e-6)*cj3);
IkReal x781=((0.00431000306807678)*sj3);
IkReal x782=((0.00431000306807678)*cj3);
IkReal x783=((0.999990711893641)*sj4);
IkReal x784=((4.31000306807678e-8)*cj3);
IkReal x785=(new_r02*x767);
IkReal x786=(cj4*x768);
IkReal x787=((1.0)*x767);
IkReal x788=(new_r10*x768);
IkReal x789=(new_r12*x768);
IkReal x790=(sj4*x767);
IkReal x791=(new_r11*x768);
IkReal x792=(cj4*x767);
IkReal x793=(sj4*x768);
IkReal x794=(new_r01*x767);
IkReal x795=(new_r00*x767);
IkReal x796=(x770+x769);
evalcond[0]=(((new_r02*x768))+(((-1.0)*new_r12*x787)));
evalcond[1]=((((-1.0)*x767*x783))+(((-1.0)*x767*x775))+new_r02);
evalcond[2]=((((-1.0)*x768*x775))+(((-1.0)*x768*x783))+new_r12);
evalcond[3]=((((-1.0)*x783))+x785+x789+(((-1.0)*x775)));
evalcond[4]=(((new_r00*x768))+(((-1.0)*new_r10*x787))+x772+(((-1.0)*x771)));
evalcond[5]=((((-1.0)*x796))+((new_r01*x768))+(((-1.0)*new_r11*x787)));
evalcond[6]=((((-1.0)*cj4*x779))+((sj4*x784))+((sj4*x781))+(((-1.0)*cj4*x780))+x795+x788);
evalcond[7]=(((sj4*x776))+(((-1.0)*cj4*x774))+x791+x794+(((-1.0)*sj4*x782))+((cj4*x777)));
evalcond[8]=(((x773*x789))+((x773*x785))+((new_r22*x783))+((new_r22*x775))+(((-1.0)*x778*x785))+(((-1.0)*x778*x789)));
evalcond[9]=(((x775*x795))+((x775*x788))+((x783*x795))+((x783*x788))+(((-1.0)*new_r20*x773))+((new_r20*x778)));
evalcond[10]=(((x775*x794))+((x775*x791))+((x783*x794))+((x783*x791))+(((-1.0)*new_r21*x773))+((new_r21*x778)));
evalcond[11]=((-1.0)+(((-1.0)*new_r22*x773))+((x775*x789))+((x775*x785))+((x783*x789))+((x783*x785))+((new_r22*x778)));
evalcond[12]=(((x781*x790))+(((-1.0)*x779*x792))+(((-1.0)*x768*x771))+((x784*x790))+new_r00+(((-1.0)*x780*x792))+((x768*x772)));
evalcond[13]=((((-1.0)*x768*x770))+(((-1.0)*x782*x790))+(((-1.0)*x774*x792))+new_r01+(((-1.0)*x768*x769))+((x777*x792))+((x776*x790)));
evalcond[14]=(((x781*x793))+((x767*x771))+(((-1.0)*x767*x772))+((x784*x793))+new_r10+(((-1.0)*x780*x786))+(((-1.0)*x779*x786)));
evalcond[15]=(((x767*x770))+(((-1.0)*x782*x793))+(((-1.0)*x774*x786))+new_r11+((x767*x769))+((x777*x786))+((x776*x793)));
evalcond[16]=(((x773*x795))+((x773*x788))+(((-1.0)*x796))+((new_r20*x783))+((new_r20*x775))+(((-1.0)*x778*x795))+(((-1.0)*x778*x788)));
evalcond[17]=(((x773*x794))+((x773*x791))+((new_r21*x783))+x771+(((-1.0)*x772))+((new_r21*x775))+(((-1.0)*x778*x791))+(((-1.0)*x778*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x797 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798=IKPowWithIntegerCheck(IKsign(((((-0.999990711893641)*sj4))+(((-0.00431000306829228)*cj4)))),-1);
if(!x798.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x797.value)+(((1.5707963267949)*(x798.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x799=IKsin(j5);
IkReal x800=IKcos(j5);
IkReal x801=((0.99999999995)*sj3);
IkReal x802=((9.9999999995e-6)*cj3);
IkReal x803=((0.99999999995)*cj3);
IkReal x804=((9.9999999995e-6)*sj3);
IkReal x805=((0.999990711893641)*cj4);
IkReal x806=((9.99990711843642e-6)*sj3);
IkReal x807=((0.00431000306829228)*cj4);
IkReal x808=((4.31000306807678e-8)*sj3);
IkReal x809=((0.999990711843642)*cj3);
IkReal x810=((0.00431000306829228)*sj4);
IkReal x811=((0.999990711843642)*sj3);
IkReal x812=((9.99990711843642e-6)*cj3);
IkReal x813=((0.00431000306807678)*sj3);
IkReal x814=((0.00431000306807678)*cj3);
IkReal x815=((0.999990711893641)*sj4);
IkReal x816=((4.31000306807678e-8)*cj3);
IkReal x817=(new_r02*x799);
IkReal x818=(cj4*x800);
IkReal x819=((1.0)*x799);
IkReal x820=(new_r10*x800);
IkReal x821=(new_r12*x800);
IkReal x822=(sj4*x799);
IkReal x823=(new_r11*x800);
IkReal x824=(cj4*x799);
IkReal x825=(sj4*x800);
IkReal x826=(new_r01*x799);
IkReal x827=(new_r00*x799);
IkReal x828=(x801+x802);
evalcond[0]=(((new_r02*x800))+(((-1.0)*new_r12*x819)));
evalcond[1]=((((-1.0)*x799*x807))+(((-1.0)*x799*x815))+new_r02);
evalcond[2]=((((-1.0)*x800*x807))+new_r12+(((-1.0)*x800*x815)));
evalcond[3]=((((-1.0)*x815))+x817+x821+(((-1.0)*x807)));
evalcond[4]=((((-1.0)*new_r10*x819))+((new_r00*x800))+x804+(((-1.0)*x803)));
evalcond[5]=((((-1.0)*new_r11*x819))+(((-1.0)*x828))+((new_r01*x800)));
evalcond[6]=(((sj4*x816))+((sj4*x813))+(((-1.0)*cj4*x811))+(((-1.0)*cj4*x812))+x820+x827);
evalcond[7]=((((-1.0)*cj4*x806))+((cj4*x809))+(((-1.0)*sj4*x814))+((sj4*x808))+x823+x826);
evalcond[8]=(((new_r22*x807))+(((-1.0)*x810*x821))+(((-1.0)*x810*x817))+((new_r22*x815))+((x805*x821))+((x805*x817)));
evalcond[9]=((((-1.0)*new_r20*x805))+((x815*x827))+((x815*x820))+((x807*x820))+((x807*x827))+((new_r20*x810)));
evalcond[10]=(((new_r21*x810))+((x815*x823))+((x815*x826))+((x807*x826))+((x807*x823))+(((-1.0)*new_r21*x805)));
evalcond[11]=((-1.0)+((x815*x817))+(((-1.0)*new_r22*x805))+((x815*x821))+((x807*x817))+((new_r22*x810))+((x807*x821)));
evalcond[12]=((((-1.0)*x812*x824))+((x800*x804))+(((-1.0)*x811*x824))+((x813*x822))+((x816*x822))+(((-1.0)*x800*x803))+new_r00);
evalcond[13]=(((x809*x824))+(((-1.0)*x814*x822))+(((-1.0)*x800*x802))+(((-1.0)*x800*x801))+((x808*x822))+new_r01+(((-1.0)*x806*x824)));
evalcond[14]=((((-1.0)*x812*x818))+(((-1.0)*x799*x804))+(((-1.0)*x811*x818))+((x813*x825))+((x816*x825))+((x799*x803))+new_r10);
evalcond[15]=(((x809*x818))+(((-1.0)*x814*x825))+((x799*x802))+((x799*x801))+((x808*x825))+new_r11+(((-1.0)*x806*x818)));
evalcond[16]=((((-1.0)*x828))+((new_r20*x807))+(((-1.0)*x810*x827))+(((-1.0)*x810*x820))+((x805*x827))+((x805*x820))+((new_r20*x815)));
evalcond[17]=(((new_r21*x815))+(((-1.0)*x810*x823))+(((-1.0)*x810*x826))+((x805*x823))+((x805*x826))+((new_r21*x807))+x803+(((-1.0)*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x829=((0.00431000306829228)*cj4);
IkReal x830=((0.999990711893641)*sj4);
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(((((-1.0)*new_r02*x830))+(((-1.0)*new_r02*x829)))),IkReal(((((-1.0)*new_r12*x830))+(((-1.0)*new_r12*x829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
CheckValue<IkReal> x832=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r02*new_r02)))+(((-1.0)*(new_r12*new_r12))))),-1);
if(!x832.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x831.value)+(((1.5707963267949)*(x832.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x833=IKsin(j5);
IkReal x834=IKcos(j5);
IkReal x835=((0.999990711893641)*cj4);
IkReal x836=((0.00431000306829228)*sj4);
IkReal x837=((0.999990711893641)*sj4);
IkReal x838=((0.00431000306829228)*cj4);
IkReal x839=(new_r02*x833);
IkReal x840=(new_r12*x834);
IkReal x841=(new_r01*x833);
IkReal x842=(new_r00*x833);
IkReal x843=(x834*x838);
evalcond[0]=(((new_r02*x834))+(((-1.0)*new_r12*x833)));
evalcond[1]=((((-1.0)*x833*x837))+(((-1.0)*x833*x838))+new_r02);
evalcond[2]=((((-1.0)*x834*x837))+(((-1.0)*x843))+new_r12);
evalcond[3]=((((-1.0)*x838))+(((-1.0)*x837))+x839+x840);
evalcond[4]=(((new_r22*x837))+((new_r22*x838))+(((-1.0)*x836*x840))+(((-1.0)*x836*x839))+((x835*x840))+((x835*x839)));
evalcond[5]=(((new_r10*x843))+((x838*x842))+((x837*x842))+((new_r20*x836))+(((-1.0)*new_r20*x835))+((new_r10*x834*x837)));
evalcond[6]=(((x838*x841))+((x837*x841))+((new_r11*x834*x837))+((new_r21*x836))+(((-1.0)*new_r21*x835))+((new_r11*x843)));
evalcond[7]=((-1.0)+(((-1.0)*new_r22*x835))+((x838*x840))+((x838*x839))+((new_r22*x836))+((x837*x840))+((x837*x839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x844=((0.99999999995)*cj5);
IkReal x845=(new_r10*sj5);
IkReal x846=((9.9999999995e-6)*cj5);
IkReal x847=(new_r11*sj5);
if( IKabs(((((9.9999999995e-6)*x845))+((new_r01*x844))+(((-0.99999999995)*x847))+(((-1.0)*new_r00*x846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r00*x844))+(((-9.9999999995e-6)*x847))+((new_r01*x846))+(((-0.99999999995)*x845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((9.9999999995e-6)*x845))+((new_r01*x844))+(((-0.99999999995)*x847))+(((-1.0)*new_r00*x846))))+IKsqr((((new_r00*x844))+(((-9.9999999995e-6)*x847))+((new_r01*x846))+(((-0.99999999995)*x845))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((9.9999999995e-6)*x845))+((new_r01*x844))+(((-0.99999999995)*x847))+(((-1.0)*new_r00*x846))), (((new_r00*x844))+(((-9.9999999995e-6)*x847))+((new_r01*x846))+(((-0.99999999995)*x845))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x848=IKcos(j3);
IkReal x849=IKsin(j3);
IkReal x850=(new_r01*sj5);
IkReal x851=((0.999990711893641)*sj4);
IkReal x852=(sj4*sj5);
IkReal x853=((0.999990711843642)*cj5);
IkReal x854=(new_r00*sj5);
IkReal x855=((0.999990711893641)*cj4);
IkReal x856=((0.00431000306829228)*cj4);
IkReal x857=((9.99990711843642e-6)*sj5);
IkReal x858=((0.00431000306829228)*sj4);
IkReal x859=(cj5*new_r10);
IkReal x860=(cj5*new_r11);
IkReal x861=((1.0)*sj5);
IkReal x862=(cj5*sj4);
IkReal x863=((9.99990711843642e-6)*sj4);
IkReal x864=((9.9999999995e-6)*x848);
IkReal x865=((0.99999999995)*x849);
IkReal x866=((0.99999999995)*x848);
IkReal x867=((9.9999999995e-6)*x849);
IkReal x868=((4.31000306807678e-8)*x848);
IkReal x869=(cj4*x848);
IkReal x870=((0.00431000306807678)*x849);
IkReal x871=((0.999990711843642)*x849);
IkReal x872=((0.00431000306807678)*x848);
IkReal x873=(cj4*x849);
IkReal x874=((4.31000306807678e-8)*x849);
IkReal x875=((9.99990711843642e-6)*x873);
IkReal x876=(x865+x864);
evalcond[0]=((((-1.0)*x866))+((cj5*new_r00))+(((-1.0)*new_r10*x861))+x867);
evalcond[1]=(((cj5*new_r01))+(((-1.0)*new_r11*x861))+(((-1.0)*x876)));
evalcond[2]=((((-1.0)*sj4*x871))+(((-1.0)*x848*x863))+(((-1.0)*cj4*x870))+new_r20+(((-1.0)*cj4*x868)));
evalcond[3]=((((-4.31000306807678e-8)*x873))+(((0.00431000306807678)*x869))+(((-1.0)*x849*x863))+new_r21+(((0.999990711843642)*sj4*x848)));
evalcond[4]=((((-9.99990711843642e-6)*x869))+((sj4*x868))+((sj4*x870))+(((-1.0)*cj4*x871))+x854+x859);
evalcond[5]=((((-1.0)*sj4*x872))+(((0.999990711843642)*x869))+((sj4*x874))+x850+x860+(((-1.0)*x875)));
evalcond[6]=((((-1.0)*cj4*sj5*x871))+((cj5*x867))+(((-1.0)*cj5*x866))+new_r00+((x852*x870))+((x852*x868))+(((-1.0)*x857*x869)));
evalcond[7]=((((-1.0)*x857*x873))+(((-1.0)*x852*x872))+(((-1.0)*cj5*x864))+(((-1.0)*cj5*x865))+new_r01+((x852*x874))+(((0.999990711843642)*sj5*x869)));
evalcond[8]=(((sj5*x866))+(((-1.0)*x853*x873))+(((-1.0)*sj5*x867))+((x862*x868))+((x862*x870))+new_r10+(((-9.99990711843642e-6)*cj5*x869)));
evalcond[9]=(((sj5*x864))+((sj5*x865))+(((-1.0)*x862*x872))+((x853*x869))+((x862*x874))+new_r11+(((-1.0)*cj5*x875)));
evalcond[10]=(((new_r20*x856))+((new_r20*x851))+((x855*x859))+(((-1.0)*x858*x859))+((x854*x855))+(((-0.00431000306829228)*new_r00*x852))+(((-1.0)*x876)));
evalcond[11]=(((x850*x855))+(((-1.0)*x867))+(((-1.0)*x850*x858))+((x855*x860))+(((-1.0)*x858*x860))+x866+((new_r21*x851))+((new_r21*x856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x877 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878=IKPowWithIntegerCheck(IKsign(((((-0.999990711893641)*sj4))+(((-0.00431000306829228)*cj4)))),-1);
if(!x878.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x877.value)+(((1.5707963267949)*(x878.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x879=IKsin(j5);
IkReal x880=IKcos(j5);
IkReal x881=((0.999990711893641)*cj4);
IkReal x882=((0.00431000306829228)*sj4);
IkReal x883=((0.999990711893641)*sj4);
IkReal x884=((0.00431000306829228)*cj4);
IkReal x885=(new_r02*x879);
IkReal x886=(new_r12*x880);
IkReal x887=(new_r01*x879);
IkReal x888=(new_r00*x879);
IkReal x889=(x880*x884);
evalcond[0]=((((-1.0)*new_r12*x879))+((new_r02*x880)));
evalcond[1]=((((-1.0)*x879*x883))+(((-1.0)*x879*x884))+new_r02);
evalcond[2]=((((-1.0)*x889))+new_r12+(((-1.0)*x880*x883)));
evalcond[3]=((((-1.0)*x883))+(((-1.0)*x884))+x885+x886);
evalcond[4]=(((x881*x885))+((x881*x886))+(((-1.0)*x882*x886))+(((-1.0)*x882*x885))+((new_r22*x884))+((new_r22*x883)));
evalcond[5]=(((new_r10*x889))+((x883*x888))+(((-1.0)*new_r20*x881))+((new_r10*x880*x883))+((new_r20*x882))+((x884*x888)));
evalcond[6]=(((new_r11*x889))+((x883*x887))+((new_r21*x882))+(((-1.0)*new_r21*x881))+((new_r11*x880*x883))+((x884*x887)));
evalcond[7]=((-1.0)+((x883*x885))+((x883*x886))+((new_r22*x882))+(((-1.0)*new_r22*x881))+((x884*x886))+((x884*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x890=((0.99999999995)*cj5);
IkReal x891=(new_r10*sj5);
IkReal x892=((9.9999999995e-6)*cj5);
IkReal x893=(new_r11*sj5);
if( IKabs((((new_r01*x890))+(((-0.99999999995)*x893))+(((-1.0)*new_r00*x892))+(((9.9999999995e-6)*x891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r00*x890))+((new_r01*x892))+(((-9.9999999995e-6)*x893))+(((-0.99999999995)*x891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*x890))+(((-0.99999999995)*x893))+(((-1.0)*new_r00*x892))+(((9.9999999995e-6)*x891))))+IKsqr((((new_r00*x890))+((new_r01*x892))+(((-9.9999999995e-6)*x893))+(((-0.99999999995)*x891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((new_r01*x890))+(((-0.99999999995)*x893))+(((-1.0)*new_r00*x892))+(((9.9999999995e-6)*x891))), (((new_r00*x890))+((new_r01*x892))+(((-9.9999999995e-6)*x893))+(((-0.99999999995)*x891))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x894=IKcos(j3);
IkReal x895=IKsin(j3);
IkReal x896=(new_r01*sj5);
IkReal x897=((0.999990711893641)*sj4);
IkReal x898=(sj4*sj5);
IkReal x899=((0.999990711843642)*cj5);
IkReal x900=(new_r00*sj5);
IkReal x901=((0.999990711893641)*cj4);
IkReal x902=((0.00431000306829228)*cj4);
IkReal x903=((9.99990711843642e-6)*sj5);
IkReal x904=((0.00431000306829228)*sj4);
IkReal x905=(cj5*new_r10);
IkReal x906=(cj5*new_r11);
IkReal x907=((1.0)*sj5);
IkReal x908=(cj5*sj4);
IkReal x909=((9.99990711843642e-6)*sj4);
IkReal x910=((9.9999999995e-6)*x894);
IkReal x911=((0.99999999995)*x895);
IkReal x912=((0.99999999995)*x894);
IkReal x913=((9.9999999995e-6)*x895);
IkReal x914=((4.31000306807678e-8)*x894);
IkReal x915=(cj4*x894);
IkReal x916=((0.00431000306807678)*x895);
IkReal x917=((0.999990711843642)*x895);
IkReal x918=((0.00431000306807678)*x894);
IkReal x919=(cj4*x895);
IkReal x920=((4.31000306807678e-8)*x895);
IkReal x921=((9.99990711843642e-6)*x919);
IkReal x922=(x911+x910);
evalcond[0]=(((cj5*new_r00))+(((-1.0)*x912))+x913+(((-1.0)*new_r10*x907)));
evalcond[1]=((((-1.0)*x922))+(((-1.0)*new_r11*x907))+((cj5*new_r01)));
evalcond[2]=((((-1.0)*x894*x909))+(((-1.0)*cj4*x914))+(((-1.0)*cj4*x916))+(((-1.0)*sj4*x917))+new_r20);
evalcond[3]=((((-1.0)*x895*x909))+(((0.999990711843642)*sj4*x894))+(((0.00431000306807678)*x915))+new_r21+(((-4.31000306807678e-8)*x919)));
evalcond[4]=((((-9.99990711843642e-6)*x915))+(((-1.0)*cj4*x917))+x905+x900+((sj4*x914))+((sj4*x916)));
evalcond[5]=((((-1.0)*x921))+((sj4*x920))+(((-1.0)*sj4*x918))+x896+x906+(((0.999990711843642)*x915)));
evalcond[6]=(((x898*x916))+((x898*x914))+(((-1.0)*cj4*sj5*x917))+(((-1.0)*cj5*x912))+((cj5*x913))+new_r00+(((-1.0)*x903*x915)));
evalcond[7]=((((-1.0)*x898*x918))+(((0.999990711843642)*sj5*x915))+((x898*x920))+(((-1.0)*cj5*x910))+(((-1.0)*cj5*x911))+new_r01+(((-1.0)*x903*x919)));
evalcond[8]=(((sj5*x912))+(((-1.0)*sj5*x913))+(((-9.99990711843642e-6)*cj5*x915))+((x908*x914))+((x908*x916))+new_r10+(((-1.0)*x899*x919)));
evalcond[9]=((((-1.0)*x908*x918))+((sj5*x911))+((sj5*x910))+((x908*x920))+((x899*x915))+new_r11+(((-1.0)*cj5*x921)));
evalcond[10]=((((-1.0)*x922))+(((-0.00431000306829228)*new_r00*x898))+((x901*x905))+((x900*x901))+((new_r20*x897))+(((-1.0)*x904*x905))+((new_r20*x902)));
evalcond[11]=((((-1.0)*x896*x904))+((new_r21*x902))+((x901*x906))+((new_r21*x897))+(((-1.0)*x913))+((x896*x901))+(((-1.0)*x904*x906))+x912);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - proarm (891ae7f8b7a5d00542919ec944f7649a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
